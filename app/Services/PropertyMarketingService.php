<?php

namespace App\Services;

class PropertyMarketingService
{
    private $propertyRepository;
    private $imageService;
    private $exportService;
    private $marketingPath;

    public function __construct(
        PropertyRepositoryInterface $propertyRepository,
        ImageService $imageService,
        ExportService $exportService,
        string $marketingPath = 'storage/marketing'
    ) {
        $this->propertyRepository = $propertyRepository;
        $this->imageService = $imageService;
        $this->exportService = $exportService;
        $this->marketingPath = $marketingPath;
    }

    public function generateMarketingMaterials(int $propertyId, array $options = []): array
    {
        try {
            $property = $this->propertyRepository->find($propertyId);
            if (!$property) {
                throw new \Exception('–ò–º–æ—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.');
            }

            $materials = [];

            if (empty($options['types']) || in_array('social', $options['types'])) {
                $materials['social'] = $this->generateSocialMediaPosts($property);
            }

            if (empty($options['types']) || in_array('banners', $options['types'])) {
                $materials['banners'] = $this->generateBanners($property);
            }

            if (empty($options['types']) || in_array('email', $options['types'])) {
                $materials['email'] = $this->generateEmailTemplate($property);
            }

            return $materials;
        } catch (\Exception $e) {
            error_log("Error generating marketing materials: " . $e->getMessage());
            throw $e;
        }
    }

    private function generateSocialMediaPosts(array $property): array
    {
        $posts = [];

        // Facebook –ø–æ—Å—Ç
        $posts['facebook'] = [
            'text' => $this->generateFacebookText($property),
            'image' => $this->prepareImage($property['images'][0], [
                'width' => 1200,
                'height' => 630,
                'watermark' => true
            ])
        ];

        // Instagram –ø–æ—Å—Ç
        $posts['instagram'] = [
            'text' => $this->generateInstagramText($property),
            'image' => $this->prepareImage($property['images'][0], [
                'width' => 1080,
                'height' => 1080,
                'watermark' => true
            ])
        ];

        // LinkedIn –ø–æ—Å—Ç
        $posts['linkedin'] = [
            'text' => $this->generateLinkedInText($property),
            'image' => $this->prepareImage($property['images'][0], [
                'width' => 1200,
                'height' => 627,
                'watermark' => true
            ])
        ];

        return $posts;
    }

    private function generateBanners(array $property): array
    {
        $banners = [];

        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏ —Ä–∞–∑–º–µ—Ä–∏ –∑–∞ –±–∞–Ω–µ—Ä–∏
        $sizes = [
            'rectangle' => ['width' => 300, 'height' => 250],
            'leaderboard' => ['width' => 728, 'height' => 90],
            'skyscraper' => ['width' => 160, 'height' => 600],
            'mobile' => ['width' => 320, 'height' => 100]
        ];

        foreach ($sizes as $type => $dimensions) {
            $banners[$type] = $this->generateBanner($property, $dimensions);
        }

        return $banners;
    }

    private function generateEmailTemplate(array $property): array
    {
        return [
            'subject' => $this->generateEmailSubject($property),
            'content' => $this->generateEmailContent($property),
            'images' => array_map(
                fn($image) => $this->prepareImage($image, [
                    'width' => 600,
                    'height' => null,
                    'watermark' => true
                ]),
                array_slice($property['images'], 0, 3)
            )
        ];
    }

    private function generateFacebookText(array $property): string
    {
        $text = "üè† –ù–û–í–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï!\n\n";
        $text .= "{$property['title']}\n\n";
        $text .= "‚ú® –û—Å–Ω–æ–≤–Ω–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n";
        $text .= "üìç –õ–æ–∫–∞—Ü–∏—è: {$property['location']}\n";
        $text .= "üõè –°–ø–∞–ª–Ω–∏: {$property['bedrooms']}\n";
        $text .= "üöø –ë–∞–Ω–∏: {$property['bathrooms']}\n";
        $text .= "üìê –ü–ª–æ—â: {$property['area']}–∫–≤.–º\n\n";
        $text .= "üí∞ –¶–µ–Ω–∞: {$property['price']}‚Ç¨\n\n";
        $text .= "üîç –ó–∞ –ø–æ–≤–µ—á–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –æ–≥–ª–µ–¥–∏:\n";
        $text .= "üìû –¢–µ–ª: +359 888 123456\n";
        $text .= "üåê www.imoti.com/properties/{$property['id']}\n\n";
        $text .= "#–Ω–µ–¥–≤–∏–∂–∏–º–∏–∏–º–æ—Ç–∏ #–∏–º–æ—Ç–∏ #–ø—Ä–æ–¥–∞–∂–±–∞ #" . $property['location'];

        return $text;
    }

    private function generateInstagramText(array $property): string
    {
        $text = "üè† {$property['title']}\n\n";
        $text .= "üìç {$property['location']}\n";
        $text .= "üí∞ {$property['price']}‚Ç¨\n\n";
        $text .= "‚ú® {$property['bedrooms']} —Å–ø–∞–ª–Ω–∏\n";
        $text .= "‚ú® {$property['bathrooms']} –±–∞–Ω–∏\n";
        $text .= "‚ú® {$property['area']}–∫–≤.–º\n\n";
        $text .= "üëâ –õ–∏–Ω–∫ –≤ –±–∏–æ\n\n";
        $text .= "#realestate #property #home #" . str_replace(' ', '', $property['location']);

        return $text;
    }

    private function generateLinkedInText(array $property): string
    {
        $text = "üè† –ï–∫—Å–∫–ª—É–∑–∏–≤–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n\n";
        $text .= "–ü—Ä–µ–¥—Å—Ç–∞–≤—è–º–µ –í–∏ {$property['title']} - –æ—Ç–ª–∏—á–Ω–∞ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç –∑–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –∏–ª–∏ –¥–æ–º.\n\n";
        $text .= "–û—Å–Ω–æ–≤–Ω–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n";
        $text .= "‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: {$property['location']}\n";
        $text .= "‚Ä¢ –ü–ª–æ—â: {$property['area']}–∫–≤.–º\n";
        $text .= "‚Ä¢ {$property['bedrooms']} —Å–ø–∞–ª–Ω–∏ –∏ {$property['bathrooms']} –±–∞–Ω–∏\n";
        $text .= "‚Ä¢ –¶–µ–Ω–∞: {$property['price']}‚Ç¨\n\n";
        $text .= "–ó–∞ –ø–æ–≤–µ—á–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –æ–≥–ª–µ–¥–∏:\n";
        $text .= "üåê www.imoti.com/properties/{$property['id']}\n";
        $text .= "üìû +359 888 123456\n\n";
        $text .= "#RealEstate #Investment #" . $property['location'];

        return $text;
    }

    private function generateEmailSubject(array $property): string
    {
        return "–ù–æ–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {$property['title']} –≤ {$property['location']}";
    }

    private function generateEmailContent(array $property): string
    {
        $content = "<h2>–ü—Ä–µ–¥—Å—Ç–∞–≤—è–º–µ –í–∏ {$property['title']}</h2>";
        $content .= "<p>–£–Ω–∏–∫–∞–ª–Ω–∞ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç –∑–∞ –∑–∞–∫—É–ø—É–≤–∞–Ω–µ –Ω–∞ –∏–º–æ—Ç –≤ {$property['location']}.</p>";
        
        $content .= "<h3>–û—Å–Ω–æ–≤–Ω–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</h3>";
        $content .= "<ul>";
        $content .= "<li>–õ–æ–∫–∞—Ü–∏—è: {$property['location']}</li>";
        $content .= "<li>–ü–ª–æ—â: {$property['area']}–∫–≤.–º</li>";
        $content .= "<li>–°–ø–∞–ª–Ω–∏: {$property['bedrooms']}</li>";
        $content .= "<li>–ë–∞–Ω–∏: {$property['bathrooms']}</li>";
        $content .= "</ul>";

        $content .= "<p><strong>–¶–µ–Ω–∞: {$property['price']}‚Ç¨</strong></p>";
        
        $content .= "<p>{$property['description']}</p>";
        
        $content .= "<p>–ó–∞ –ø–æ–≤–µ—á–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –æ–≥–ª–µ–¥–∏:<br>";
        $content .= "–¢–µ–ª: +359 888 123456<br>";
        $content .= "Email: office@imoti.com</p>";

        return $content;
    }

    private function generateBanner(array $property, array $dimensions): array
    {
        return [
            'image' => $this->prepareImage($property['images'][0], [
                'width' => $dimensions['width'],
                'height' => $dimensions['height'],
                'watermark' => true
            ]),
            'text' => [
                'title' => $this->truncateText($property['title'], 30),
                'price' => number_format($property['price'], 0) . '‚Ç¨',
                'location' => $this->truncateText($property['location'], 20)
            ]
        ];
    }

    private function prepareImage(string $imagePath, array $options): string
    {
        $filename = basename($imagePath);
        $extension = pathinfo($filename, PATHINFO_EXTENSION);
        
        $newFilename = sprintf(
            '%s_%dx%d%s.%s',
            pathinfo($filename, PATHINFO_FILENAME),
            $options['width'],
            $options['height'] ?? 'auto',
            $options['watermark'] ? '_wm' : '',
            $extension
        );

        $outputPath = $this->marketingPath . '/' . $newFilename;
        
        if (!file_exists($outputPath)) {
            $this->imageService->resize($imagePath, $outputPath, $options);
            
            if ($options['watermark']) {
                $this->imageService->addWatermark($outputPath);
            }
        }

        return $newFilename;
    }

    private function truncateText(string $text, int $length): string
    {
        if (mb_strlen($text) <= $length) {
            return $text;
        }

        return mb_substr($text, 0, $length - 3) . '...';
    }
} 