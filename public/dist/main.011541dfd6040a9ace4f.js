/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/js/main.js":
/*!***************************!*\
  !*** ./public/js/main.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_auth_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/auth.js */ \"./public/js/modules/auth.js\");\n/* harmony import */ var _modules_ui_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/ui.js */ \"./public/js/modules/ui.js\");\n/* harmony import */ var _modules_notifications_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/notifications.js */ \"./public/js/modules/notifications.js\");\n/* harmony import */ var _modules_notifications_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_modules_notifications_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _modules_backup_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/backup.js */ \"./public/js/modules/backup.js\");\n/* harmony import */ var _modules_settings_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/settings.js */ \"./public/js/modules/settings.js\");\n/* harmony import */ var _modules_validation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/validation.js */ \"./public/js/modules/validation.js\");\n/* harmony import */ var _modules_charts_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/charts.js */ \"./public/js/modules/charts.js\");\n/* harmony import */ var _modules_fileUpload_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modules/fileUpload.js */ \"./public/js/modules/fileUpload.js\");\n// Import modules\n\n\n\n\n\n\n\n\n\n// Initialize app when DOM is ready\ndocument.addEventListener('DOMContentLoaded', async () => {\n  // Initialize core modules first\n  (0,_modules_auth_js__WEBPACK_IMPORTED_MODULE_0__.initializeAuth)();\n  (0,_modules_ui_js__WEBPACK_IMPORTED_MODULE_1__.initializeUI)();\n\n  // Lazy load feature modules based on page content\n  const modulePromises = [];\n\n  // Check if notifications are needed\n  if (document.querySelector('.notifications-container')) {\n    modulePromises.push(Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./modules/notifications.js */ \"./public/js/modules/notifications.js\", 23)).then(module => module.initializeNotifications()).catch(err => console.error('Error loading notifications module:', err)));\n  }\n\n  // Check if backup functionality is needed\n  if (document.querySelector('.backup-section')) {\n    modulePromises.push(Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modules/backup.js */ \"./public/js/modules/backup.js\")).then(module => module.initializeBackup()).catch(err => console.error('Error loading backup module:', err)));\n  }\n\n  // Check if settings are needed\n  if (document.querySelector('.settings-section')) {\n    modulePromises.push(Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modules/settings.js */ \"./public/js/modules/settings.js\")).then(module => module.initializeSettings()).catch(err => console.error('Error loading settings module:', err)));\n  }\n\n  // Check if form validation is needed\n  if (document.querySelector('form[data-validate]')) {\n    modulePromises.push(Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modules/validation.js */ \"./public/js/modules/validation.js\")).then(module => module.initializeValidation()).catch(err => console.error('Error loading validation module:', err)));\n  }\n\n  // Check if charts are needed\n  if (document.querySelector('.chart-container')) {\n    modulePromises.push(Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modules/charts.js */ \"./public/js/modules/charts.js\")).then(module => module.initializeCharts()).catch(err => console.error('Error loading charts module:', err)));\n  }\n\n  // Check if file upload is needed\n  if (document.querySelector('.file-upload')) {\n    modulePromises.push(Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./modules/fileUpload.js */ \"./public/js/modules/fileUpload.js\")).then(module => module.initializeFileUpload()).catch(err => console.error('Error loading file upload module:', err)));\n  }\n\n  // Wait for all modules to load\n  try {\n    await Promise.all(modulePromises);\n    console.log('All required modules initialized successfully');\n  } catch (error) {\n    console.error('Error initializing modules:', error);\n  }\n});\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Мобилно меню\n  const mobileMenuBtn = document.createElement('button');\n  mobileMenuBtn.className = 'mobile-menu-btn';\n  mobileMenuBtn.innerHTML = '<span></span><span></span><span></span>';\n  const nav = document.querySelector('.main-nav');\n  nav.insertBefore(mobileMenuBtn, nav.firstChild);\n  mobileMenuBtn.addEventListener('click', function () {\n    document.querySelector('.nav-links').classList.toggle('active');\n    this.classList.toggle('active');\n  });\n\n  // Плавен скрол при клик върху линкове в менюто\n  document.querySelectorAll('.nav-links a').forEach(link => {\n    link.addEventListener('click', function (e) {\n      const href = this.getAttribute('href');\n      if (href.startsWith('#')) {\n        e.preventDefault();\n        const target = document.querySelector(href);\n        if (target) {\n          target.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      }\n    });\n  });\n\n  // Анимация на хедъра при скрол\n  let lastScroll = 0;\n  const header = document.querySelector('.main-header');\n  window.addEventListener('scroll', function () {\n    const currentScroll = window.pageYOffset;\n    if (currentScroll <= 0) {\n      header.classList.remove('scroll-up');\n      return;\n    }\n    if (currentScroll > lastScroll && !header.classList.contains('scroll-down')) {\n      // Скрол надолу\n      header.classList.remove('scroll-up');\n      header.classList.add('scroll-down');\n    } else if (currentScroll < lastScroll && header.classList.contains('scroll-down')) {\n      // Скрол нагоре\n      header.classList.remove('scroll-down');\n      header.classList.add('scroll-up');\n    }\n    lastScroll = currentScroll;\n  });\n\n  // Lazy loading на изображения\n  const images = document.querySelectorAll('img[data-src]');\n  const imageOptions = {\n    threshold: 0,\n    rootMargin: '0px 0px 50px 0px'\n  };\n  const imageObserver = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        const img = entry.target;\n        img.src = img.dataset.src;\n        img.classList.add('loaded');\n        observer.unobserve(img);\n      }\n    });\n  }, imageOptions);\n  images.forEach(img => imageObserver.observe(img));\n\n  // Анимации при скрол\n  const animatedElements = document.querySelectorAll('.animate-on-scroll');\n  const animationOptions = {\n    threshold: 0.2\n  };\n  const animationObserver = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        entry.target.classList.add('animated');\n      }\n    });\n  }, animationOptions);\n  animatedElements.forEach(el => animationObserver.observe(el));\n\n  // Валидация на формата за контакт\n  const contactForm = document.querySelector('.contact-form');\n  if (contactForm) {\n    contactForm.addEventListener('submit', function (e) {\n      e.preventDefault();\n      const name = this.querySelector('[name=\"name\"]').value;\n      const email = this.querySelector('[name=\"email\"]').value;\n      const message = this.querySelector('[name=\"message\"]').value;\n      let isValid = true;\n\n      // Изчистване на предишни грешки\n      this.querySelectorAll('.error-message').forEach(el => el.remove());\n\n      // Валидация на име\n      if (name.trim().length < 2) {\n        showError(this.querySelector('[name=\"name\"]'), 'Моля, въведете валидно име');\n        isValid = false;\n      }\n\n      // Валидация на имейл\n      if (!isValidEmail(email)) {\n        showError(this.querySelector('[name=\"email\"]'), 'Моля, въведете валиден имейл адрес');\n        isValid = false;\n      }\n\n      // Валидация на съобщение\n      if (message.trim().length < 10) {\n        showError(this.querySelector('[name=\"message\"]'), 'Съобщението трябва да бъде поне 10 символа');\n        isValid = false;\n      }\n      if (isValid) {\n        // Изпращане на формата\n        this.submit();\n      }\n    });\n  }\n  animateNumbers();\n  initAboutAnimations();\n  initSearchPage();\n});\n\n// Помощни функции\nfunction isValidEmail(email) {\n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\nfunction showError(input, message) {\n  const errorDiv = document.createElement('div');\n  errorDiv.className = 'error-message';\n  errorDiv.textContent = message;\n  input.parentNode.insertBefore(errorDiv, input.nextSibling);\n  input.classList.add('error');\n}\n\n// Добавяне на допълнителни стилове за мобилното меню\nconst style = document.createElement('style');\nstyle.textContent = \"\\n    .mobile-menu-btn {\\n        display: none;\\n        background: none;\\n        border: none;\\n        cursor: pointer;\\n        padding: 10px;\\n    }\\n\\n    .mobile-menu-btn span {\\n        display: block;\\n        width: 25px;\\n        height: 3px;\\n        background: #333;\\n        margin: 5px 0;\\n        transition: 0.3s;\\n    }\\n\\n    @media (max-width: 768px) {\\n        .mobile-menu-btn {\\n            display: block;\\n        }\\n\\n        .nav-links {\\n            position: fixed;\\n            top: 70px;\\n            left: 0;\\n            right: 0;\\n            background: #fff;\\n            padding: 20px;\\n            flex-direction: column;\\n            text-align: center;\\n            transform: translateY(-100%);\\n            transition: transform 0.3s;\\n        }\\n\\n        .nav-links.active {\\n            transform: translateY(0);\\n        }\\n\\n        .mobile-menu-btn.active span:nth-child(1) {\\n            transform: rotate(45deg) translate(5px, 5px);\\n        }\\n\\n        .mobile-menu-btn.active span:nth-child(2) {\\n            opacity: 0;\\n        }\\n\\n        .mobile-menu-btn.active span:nth-child(3) {\\n            transform: rotate(-45deg) translate(7px, -7px);\\n        }\\n    }\\n\";\ndocument.head.appendChild(style);\nfunction animateNumbers() {\n  const stats = document.querySelectorAll('.stat-number');\n  stats.forEach(stat => {\n    const target = parseInt(stat.textContent);\n    const duration = 2500; // Увеличаваме продължителността\n    const frames = 60;\n    const step = target / (duration / (1000 / frames));\n    let current = 0;\n    function easeOutQuart(x) {\n      return 1 - Math.pow(1 - x, 4);\n    }\n    function updateNumber(timestamp) {\n      if (!updateNumber.startTime) {\n        updateNumber.startTime = timestamp;\n      }\n      const elapsed = timestamp - updateNumber.startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      current = Math.round(target * easeOutQuart(progress));\n      stat.textContent = current + '+';\n      if (progress < 1) {\n        requestAnimationFrame(updateNumber);\n      }\n    }\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          requestAnimationFrame(updateNumber);\n          observer.unobserve(entry.target);\n          entry.target.closest('.stat-item').classList.add('animated');\n        }\n      });\n    }, {\n      threshold: 0.5\n    });\n    observer.observe(stat);\n  });\n}\n\n// Анимации при скролване за About страницата\nfunction initAboutAnimations() {\n  const aboutContent = document.querySelector('.about-content');\n  const whyUsItems = document.querySelectorAll('.why-us-item');\n  const teamMembers = document.querySelectorAll('.team-member');\n  const observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        entry.target.classList.add('animated');\n\n        // Специална анимация за Why Us секцията\n        if (entry.target.classList.contains('why-us-item')) {\n          const delay = Array.from(whyUsItems).indexOf(entry.target) * 200;\n          entry.target.style.transitionDelay = \"\".concat(delay, \"ms\");\n        }\n\n        // Специална анимация за екипа\n        if (entry.target.classList.contains('team-member')) {\n          const delay = Array.from(teamMembers).indexOf(entry.target) * 200;\n          entry.target.style.transitionDelay = \"\".concat(delay, \"ms\");\n        }\n        observer.unobserve(entry.target);\n      }\n    });\n  }, {\n    threshold: 0.2\n  });\n  if (aboutContent) observer.observe(aboutContent);\n  whyUsItems.forEach(item => observer.observe(item));\n  teamMembers.forEach(member => observer.observe(member));\n\n  // Добавяне на floating ефект\n  const floatingElements = document.querySelectorAll('.floating');\n  floatingElements.forEach(element => {\n    element.style.animationDelay = Math.random() * 2 + 's';\n  });\n\n  // Анимация на skill bars\n  const skillBars = document.querySelectorAll('.skill-progress');\n  const skillObserver = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        const progress = entry.target;\n        const value = progress.getAttribute('data-value');\n        progress.style.transform = \"scaleX(\".concat(value / 100, \")\");\n        skillObserver.unobserve(progress);\n      }\n    });\n  }, {\n    threshold: 0.5\n  });\n  skillBars.forEach(bar => skillObserver.observe(bar));\n\n  // Паралакс ефект за About секцията\n  const aboutSection = document.querySelector('.about-section');\n  if (aboutSection) {\n    window.addEventListener('scroll', () => {\n      const scrolled = window.pageYOffset;\n      const rate = scrolled * 0.15;\n      const image = aboutSection.querySelector('.about-image');\n      if (image) {\n        image.style.transform = \"translate3d(0, \".concat(rate, \"px, 0)\");\n      }\n    });\n  }\n  createParticles();\n  initTimelineAnimation();\n  init3DCardEffect();\n}\nfunction createParticles() {\n  const container = document.querySelector('.particles-container');\n  if (!container) return;\n  const particleCount = 20;\n  for (let i = 0; i < particleCount; i++) {\n    const particle = document.createElement('div');\n    particle.className = 'particle';\n\n    // Случайно позициониране\n    particle.style.left = Math.random() * 100 + '%';\n    particle.style.top = Math.random() * 100 + '%';\n\n    // Случайно закъснение на анимацията\n    particle.style.animationDelay = Math.random() * 5 + 's';\n    container.appendChild(particle);\n  }\n}\nfunction initTimelineAnimation() {\n  const timelineItems = document.querySelectorAll('.timeline-item');\n  const observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        entry.target.classList.add('animated');\n\n        // Добавяме закъснение за последователно появяване\n        const index = Array.from(timelineItems).indexOf(entry.target);\n        entry.target.style.transitionDelay = \"\".concat(index * 200, \"ms\");\n        observer.unobserve(entry.target);\n      }\n    });\n  }, {\n    threshold: 0.2\n  });\n  timelineItems.forEach(item => observer.observe(item));\n}\n\n// 3D Card Effect\nfunction init3DCardEffect() {\n  const cards = document.querySelectorAll('.about-card');\n  cards.forEach(card => {\n    card.addEventListener('mousemove', e => {\n      const rect = card.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      const centerX = rect.width / 2;\n      const centerY = rect.height / 2;\n      const rotateX = (y - centerY) / 20;\n      const rotateY = (centerX - x) / 20;\n      card.style.transform = \"\\n                perspective(1000px)\\n                rotateX(\".concat(rotateX, \"deg)\\n                rotateY(\").concat(rotateY, \"deg)\\n                scale3d(1.05, 1.05, 1.05)\\n            \");\n    });\n    card.addEventListener('mouseleave', () => {\n      card.style.transform = 'none';\n    });\n  });\n}\n\n// Функционалности за страницата за търсене\nfunction initSearchPage() {\n  const filtersForm = document.querySelector('.filters-form');\n  const activeFilters = document.querySelector('.active-filters');\n  const rangeInputs = document.querySelectorAll('input[type=\"number\"]');\n  if (!filtersForm) return;\n\n  // Автоматично изпращане на формата при промяна на селект полетата\n  filtersForm.querySelectorAll('select').forEach(select => {\n    select.addEventListener('change', () => {\n      filtersForm.submit();\n    });\n  });\n\n  // Забавяне на изпращането при въвеждане в полетата за цена и площ\n  let timeout;\n  rangeInputs.forEach(input => {\n    input.addEventListener('input', () => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        filtersForm.submit();\n      }, 1000);\n    });\n  });\n\n  // Добавяне на активни филтри като тагове\n  function updateActiveFilters() {\n    if (!activeFilters) return;\n    activeFilters.innerHTML = '';\n    const formData = new FormData(filtersForm);\n    for (let [key, value] of formData.entries()) {\n      if (value && key !== 'page') {\n        const tag = document.createElement('span');\n        tag.className = 'filter-tag';\n\n        // Вземане на текста на избраната опция за селект полетата\n        if (key.includes('type') || key.includes('status') || key.includes('location')) {\n          const select = filtersForm.querySelector(\"select[name=\\\"\".concat(key, \"\\\"]\"));\n          const option = select.options[select.selectedIndex];\n          value = option.text;\n        }\n        tag.innerHTML = \"\\n                    \".concat(value, \"\\n                    <span class=\\\"remove\\\" data-filter=\\\"\").concat(key, \"\\\">\\xD7</span>\\n                \");\n        activeFilters.appendChild(tag);\n      }\n    }\n\n    // Премахване на филтър при клик върху X\n    activeFilters.querySelectorAll('.remove').forEach(removeBtn => {\n      removeBtn.addEventListener('click', () => {\n        const filterName = removeBtn.dataset.filter;\n        const input = filtersForm.querySelector(\"[name=\\\"\".concat(filterName, \"\\\"]\"));\n        if (input.tagName === 'SELECT') {\n          input.value = '';\n        } else {\n          input.value = '';\n        }\n        filtersForm.submit();\n      });\n    });\n  }\n\n  // Анимация на картите с имоти при скролване\n  function animatePropertyCards() {\n    const cards = document.querySelectorAll('.property-card');\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          entry.target.style.animation = 'fadeInUp 0.6s ease forwards';\n          observer.unobserve(entry.target);\n        }\n      });\n    }, {\n      threshold: 0.1\n    });\n    cards.forEach(card => {\n      card.style.opacity = '0';\n      observer.observe(card);\n    });\n  }\n\n  // Валидация на ценовите диапазони\n  function validateRanges() {\n    const minPrice = document.querySelector('[name=\"min_price\"]');\n    const maxPrice = document.querySelector('[name=\"max_price\"]');\n    const minArea = document.querySelector('[name=\"min_area\"]');\n    const maxArea = document.querySelector('[name=\"max_area\"]');\n    function validateRange(min, max) {\n      if (!min || !max) return;\n      min.addEventListener('input', () => {\n        if (Number(min.value) > Number(max.value) && max.value) {\n          min.value = max.value;\n        }\n      });\n      max.addEventListener('input', () => {\n        if (Number(max.value) < Number(min.value) && min.value) {\n          max.value = min.value;\n        }\n      });\n    }\n    validateRange(minPrice, maxPrice);\n    validateRange(minArea, maxArea);\n  }\n\n  // Добавяне на сортиране с анимация\n  function initSorting() {\n    const sortSelect = document.querySelector('.sort-select');\n    if (!sortSelect) return;\n    sortSelect.addEventListener('change', () => {\n      const cards = document.querySelectorAll('.property-card');\n      cards.forEach(card => {\n        card.style.animation = 'fadeOut 0.3s ease forwards';\n      });\n      setTimeout(() => filtersForm.submit(), 300);\n    });\n  }\n\n  // Добавяне на филтър за запазени имоти\n  function initFavorites() {\n    const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');\n    const favoritesFilter = document.querySelector('.favorites-filter');\n    if (favoritesFilter) {\n      favoritesFilter.addEventListener('change', () => {\n        if (favoritesFilter.checked) {\n          document.querySelectorAll('.property-card').forEach(card => {\n            if (!favorites.includes(card.dataset.id)) {\n              card.style.display = 'none';\n            }\n          });\n        } else {\n          document.querySelectorAll('.property-card').forEach(card => {\n            card.style.display = 'block';\n          });\n        }\n      });\n    }\n  }\n\n  // Добавяне на интерактивна карта с имотите\n  function initMap() {\n    const mapContainer = document.querySelector('#properties-map');\n    if (!mapContainer) return;\n    const map = L.map(mapContainer).setView([42.6977, 23.3219], 7);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n\n    // Добавяне на маркери за всеки имот\n    document.querySelectorAll('.property-card').forEach(card => {\n      const lat = card.dataset.lat;\n      const lng = card.dataset.lng;\n      if (lat && lng) {\n        const marker = L.marker([lat, lng]).addTo(map);\n        marker.bindPopup(\"\\n                    <div class=\\\"map-popup\\\">\\n                        <img src=\\\"\".concat(card.querySelector('img').src, \"\\\" alt=\\\"\\\">\\n                        <h3>\").concat(card.querySelector('h3').textContent, \"</h3>\\n                        <p>\").concat(card.querySelector('.price').textContent, \"</p>\\n                        <a href=\\\"\").concat(card.querySelector('a').href, \"\\\">\\n                            \").concat(card.querySelector('a').textContent, \"\\n                        </a>\\n                    </div>\\n                \"));\n      }\n    });\n  }\n\n  // Добавяне на филтри за допълнителни характеристики\n  function initAdvancedFilters() {\n    const advancedBtn = document.querySelector('.advanced-filters-btn');\n    const advancedFilters = document.querySelector('.advanced-filters');\n    if (advancedBtn && advancedFilters) {\n      advancedBtn.addEventListener('click', () => {\n        advancedFilters.classList.toggle('active');\n        advancedBtn.textContent = advancedFilters.classList.contains('active') ? 'Скрий филтри' : 'Покажи още филтри';\n      });\n    }\n  }\n\n  // Добавяне на сравнение на имоти\n  function initCompare() {\n    const compareCheckboxes = document.querySelectorAll('.compare-checkbox');\n    const compareBtn = document.querySelector('.compare-btn');\n    const compareList = [];\n    compareCheckboxes.forEach(checkbox => {\n      checkbox.addEventListener('change', () => {\n        const propertyId = checkbox.dataset.id;\n        if (checkbox.checked) {\n          if (compareList.length >= 3) {\n            checkbox.checked = false;\n            alert('Можете да сравните максимум 3 имота');\n            return;\n          }\n          compareList.push(propertyId);\n        } else {\n          const index = compareList.indexOf(propertyId);\n          if (index > -1) compareList.splice(index, 1);\n        }\n        compareBtn.disabled = compareList.length < 2;\n      });\n    });\n    if (compareBtn) {\n      compareBtn.addEventListener('click', () => {\n        window.location.href = \"compare.php?ids=\".concat(compareList.join(','));\n      });\n    }\n  }\n\n  // Инициализация на всички функционалности\n  updateActiveFilters();\n  animatePropertyCards();\n  validateRanges();\n  initSorting();\n  initFavorites();\n  initMap();\n  initAdvancedFilters();\n  initCompare();\n}\n\n// Добавяне към основната инициализация\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Съществуващ код...\n\n  initSearchPage();\n});\nfunction initPropertyPage() {\n  if (!document.querySelector('.property-page')) return;\n\n  // Инициализация на Swiper галерията\n  const thumbsSwiper = new Swiper('.thumbs-swiper', {\n    spaceBetween: 10,\n    slidesPerView: 'auto',\n    freeMode: true,\n    watchSlidesProgress: true,\n    centerInsufficientSlides: true\n  });\n  const mainSwiper = new Swiper('.main-swiper', {\n    spaceBetween: 10,\n    navigation: {\n      nextEl: '.swiper-button-next',\n      prevEl: '.swiper-button-prev'\n    },\n    thumbs: {\n      swiper: thumbsSwiper\n    }\n  });\n\n  // Инициализация на картата\n  const mapElement = document.getElementById('property-map');\n  if (mapElement) {\n    const lat = parseFloat(mapElement.dataset.lat);\n    const lng = parseFloat(mapElement.dataset.lng);\n    const map = new google.maps.Map(mapElement, {\n      center: {\n        lat,\n        lng\n      },\n      zoom: 15,\n      styles: [{\n        featureType: \"poi\",\n        elementType: \"labels\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }]\n    });\n    new google.maps.Marker({\n      position: {\n        lat,\n        lng\n      },\n      map,\n      icon: {\n        url: 'assets/images/marker.png',\n        scaledSize: new google.maps.Size(40, 40)\n      }\n    });\n  }\n\n  // Функционалност за запазване на имот\n  const saveButton = document.querySelector('.save-property');\n  if (saveButton) {\n    const propertyId = saveButton.dataset.id;\n    const savedProperties = JSON.parse(localStorage.getItem('savedProperties') || '[]');\n    if (savedProperties.includes(propertyId)) {\n      saveButton.classList.add('saved');\n    }\n    saveButton.addEventListener('click', function () {\n      const index = savedProperties.indexOf(propertyId);\n      if (index === -1) {\n        savedProperties.push(propertyId);\n        this.classList.add('saved');\n        showNotification(translations.property_saved);\n      } else {\n        savedProperties.splice(index, 1);\n        this.classList.remove('saved');\n        showNotification(translations.property_removed);\n      }\n      localStorage.setItem('savedProperties', JSON.stringify(savedProperties));\n    });\n  }\n\n  // Функционалност за споделяне\n  const shareButton = document.querySelector('.share-property');\n  if (shareButton) {\n    shareButton.addEventListener('click', async function () {\n      if (navigator.share) {\n        try {\n          await navigator.share({\n            title: document.title,\n            url: window.location.href\n          });\n        } catch (err) {\n          console.error('Error sharing:', err);\n        }\n      } else {\n        // Fallback за браузъри без Web Share API\n        const dummy = document.createElement('input');\n        document.body.appendChild(dummy);\n        dummy.value = window.location.href;\n        dummy.select();\n        document.execCommand('copy');\n        document.body.removeChild(dummy);\n        showNotification('Линкът е копиран в клипборда');\n      }\n    });\n  }\n\n  // Функционалност за принтиране\n  const printButton = document.querySelector('.print-property');\n  if (printButton) {\n    printButton.addEventListener('click', function () {\n      window.print();\n    });\n  }\n\n  // Валидация на контактната форма\n  const contactForm = document.querySelector('.contact-form');\n  if (contactForm) {\n    contactForm.addEventListener('submit', function (e) {\n      e.preventDefault();\n      const formData = new FormData(this);\n      fetch('send-inquiry.php', {\n        method: 'POST',\n        body: formData\n      }).then(response => response.json()).then(data => {\n        if (data.success) {\n          showNotification(data.message);\n          this.reset();\n        } else {\n          showNotification(data.message, 'error');\n        }\n      }).catch(error => {\n        console.error('Error:', error);\n        showNotification('Възникна грешка при изпращането', 'error');\n      });\n    });\n  }\n}\n\n// Добавяне към основната инициализация\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Съществуващ код...\n\n  initPropertyPage();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUkwRCxXQUFXLEVBQUU7SUFDYkEsV0FBVyxDQUFDNUQsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFVBQVN5QixDQUFDLEVBQUU7TUFDL0NBLENBQUMsQ0FBQ0ksY0FBYyxDQUFDLENBQUM7TUFFbEIsTUFBTW9JLFFBQVEsR0FBRyxJQUFJQyxRQUFRLENBQUMsSUFBSSxDQUFDO01BRW5DK0csS0FBSyxDQUFDLGtCQUFrQixFQUFFO1FBQ3RCQyxNQUFNLEVBQUUsTUFBTTtRQUNkTixJQUFJLEVBQUUzRztNQUNWLENBQUMsQ0FBQyxDQUNEN0osSUFBSSxDQUFDK1EsUUFBUSxJQUFJQSxRQUFRLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDakNoUixJQUFJLENBQUNpUixJQUFJLElBQUk7UUFDVixJQUFJQSxJQUFJLENBQUNDLE9BQU8sRUFBRTtVQUNkckIsZ0JBQWdCLENBQUNvQixJQUFJLENBQUNyTixPQUFPLENBQUM7VUFDOUIsSUFBSSxDQUFDdU4sS0FBSyxDQUFDLENBQUM7UUFDaEIsQ0FBQyxNQUFNO1VBQ0h0QixnQkFBZ0IsQ0FBQ29CLElBQUksQ0FBQ3JOLE9BQU8sRUFBRSxPQUFPLENBQUM7UUFDM0M7TUFDSixDQUFDLENBQUMsQ0FDRDFELEtBQUssQ0FBQ0csS0FBSyxJQUFJO1FBQ1pELE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLFFBQVEsRUFBRUEsS0FBSyxDQUFDO1FBQzlCd1AsZ0JBQWdCLENBQUMsaUNBQWlDLEVBQUUsT0FBTyxDQUFDO01BQ2hFLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQztFQUNOO0FBQ0o7O0FBRUE7QUFDQWxRLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsWUFBVztFQUNyRDs7RUFFQThOLGdCQUFnQixDQUFDLENBQUM7QUFDdEIsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1vYmlsaWVuLy4vcHVibGljL2pzL21haW4uanM/Y2VhZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnQgbW9kdWxlc1xyXG5pbXBvcnQgeyBpbml0aWFsaXplQXV0aCB9IGZyb20gJy4vbW9kdWxlcy9hdXRoLmpzJztcclxuaW1wb3J0IHsgaW5pdGlhbGl6ZVVJIH0gZnJvbSAnLi9tb2R1bGVzL3VpLmpzJztcclxuaW1wb3J0IHsgaW5pdGlhbGl6ZU5vdGlmaWNhdGlvbnMgfSBmcm9tICcuL21vZHVsZXMvbm90aWZpY2F0aW9ucy5qcyc7XHJcbmltcG9ydCB7IGluaXRpYWxpemVCYWNrdXAgfSBmcm9tICcuL21vZHVsZXMvYmFja3VwLmpzJztcclxuaW1wb3J0IHsgaW5pdGlhbGl6ZVNldHRpbmdzIH0gZnJvbSAnLi9tb2R1bGVzL3NldHRpbmdzLmpzJztcclxuaW1wb3J0IHsgaW5pdGlhbGl6ZVZhbGlkYXRpb24gfSBmcm9tICcuL21vZHVsZXMvdmFsaWRhdGlvbi5qcyc7XHJcbmltcG9ydCB7IGluaXRpYWxpemVDaGFydHMgfSBmcm9tICcuL21vZHVsZXMvY2hhcnRzLmpzJztcclxuaW1wb3J0IHsgaW5pdGlhbGl6ZUZpbGVVcGxvYWQgfSBmcm9tICcuL21vZHVsZXMvZmlsZVVwbG9hZC5qcyc7XHJcblxyXG4vLyBJbml0aWFsaXplIGFwcCB3aGVuIERPTSBpcyByZWFkeVxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gSW5pdGlhbGl6ZSBjb3JlIG1vZHVsZXMgZmlyc3RcclxuICAgIGluaXRpYWxpemVBdXRoKCk7XHJcbiAgICBpbml0aWFsaXplVUkoKTtcclxuICAgIFxyXG4gICAgLy8gTGF6eSBsb2FkIGZlYXR1cmUgbW9kdWxlcyBiYXNlZCBvbiBwYWdlIGNvbnRlbnRcclxuICAgIGNvbnN0IG1vZHVsZVByb21pc2VzID0gW107XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGlmIG5vdGlmaWNhdGlvbnMgYXJlIG5lZWRlZFxyXG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ub3RpZmljYXRpb25zLWNvbnRhaW5lcicpKSB7XHJcbiAgICAgICAgbW9kdWxlUHJvbWlzZXMucHVzaChcclxuICAgICAgICAgICAgaW1wb3J0KCcuL21vZHVsZXMvbm90aWZpY2F0aW9ucy5qcycpXHJcbiAgICAgICAgICAgICAgICAudGhlbihtb2R1bGUgPT4gbW9kdWxlLmluaXRpYWxpemVOb3RpZmljYXRpb25zKCkpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgbm90aWZpY2F0aW9ucyBtb2R1bGU6JywgZXJyKSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBDaGVjayBpZiBiYWNrdXAgZnVuY3Rpb25hbGl0eSBpcyBuZWVkZWRcclxuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYmFja3VwLXNlY3Rpb24nKSkge1xyXG4gICAgICAgIG1vZHVsZVByb21pc2VzLnB1c2goXHJcbiAgICAgICAgICAgIGltcG9ydCgnLi9tb2R1bGVzL2JhY2t1cC5qcycpXHJcbiAgICAgICAgICAgICAgICAudGhlbihtb2R1bGUgPT4gbW9kdWxlLmluaXRpYWxpemVCYWNrdXAoKSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBiYWNrdXAgbW9kdWxlOicsIGVycikpXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgaWYgc2V0dGluZ3MgYXJlIG5lZWRlZFxyXG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZXR0aW5ncy1zZWN0aW9uJykpIHtcclxuICAgICAgICBtb2R1bGVQcm9taXNlcy5wdXNoKFxyXG4gICAgICAgICAgICBpbXBvcnQoJy4vbW9kdWxlcy9zZXR0aW5ncy5qcycpXHJcbiAgICAgICAgICAgICAgICAudGhlbihtb2R1bGUgPT4gbW9kdWxlLmluaXRpYWxpemVTZXR0aW5ncygpKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIHNldHRpbmdzIG1vZHVsZTonLCBlcnIpKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGlmIGZvcm0gdmFsaWRhdGlvbiBpcyBuZWVkZWRcclxuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb3JtW2RhdGEtdmFsaWRhdGVdJykpIHtcclxuICAgICAgICBtb2R1bGVQcm9taXNlcy5wdXNoKFxyXG4gICAgICAgICAgICBpbXBvcnQoJy4vbW9kdWxlcy92YWxpZGF0aW9uLmpzJylcclxuICAgICAgICAgICAgICAgIC50aGVuKG1vZHVsZSA9PiBtb2R1bGUuaW5pdGlhbGl6ZVZhbGlkYXRpb24oKSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyB2YWxpZGF0aW9uIG1vZHVsZTonLCBlcnIpKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGlmIGNoYXJ0cyBhcmUgbmVlZGVkXHJcbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNoYXJ0LWNvbnRhaW5lcicpKSB7XHJcbiAgICAgICAgbW9kdWxlUHJvbWlzZXMucHVzaChcclxuICAgICAgICAgICAgaW1wb3J0KCcuL21vZHVsZXMvY2hhcnRzLmpzJylcclxuICAgICAgICAgICAgICAgIC50aGVuKG1vZHVsZSA9PiBtb2R1bGUuaW5pdGlhbGl6ZUNoYXJ0cygpKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIGNoYXJ0cyBtb2R1bGU6JywgZXJyKSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBDaGVjayBpZiBmaWxlIHVwbG9hZCBpcyBuZWVkZWRcclxuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsZS11cGxvYWQnKSkge1xyXG4gICAgICAgIG1vZHVsZVByb21pc2VzLnB1c2goXHJcbiAgICAgICAgICAgIGltcG9ydCgnLi9tb2R1bGVzL2ZpbGVVcGxvYWQuanMnKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4obW9kdWxlID0+IG1vZHVsZS5pbml0aWFsaXplRmlsZVVwbG9hZCgpKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIGZpbGUgdXBsb2FkIG1vZHVsZTonLCBlcnIpKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFdhaXQgZm9yIGFsbCBtb2R1bGVzIHRvIGxvYWRcclxuICAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwobW9kdWxlUHJvbWlzZXMpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdBbGwgcmVxdWlyZWQgbW9kdWxlcyBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHknKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW5pdGlhbGl6aW5nIG1vZHVsZXM6JywgZXJyb3IpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcclxuICAgIC8vINCc0L7QsdC40LvQvdC+INC80LXQvdGOXHJcbiAgICBjb25zdCBtb2JpbGVNZW51QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICBtb2JpbGVNZW51QnRuLmNsYXNzTmFtZSA9ICdtb2JpbGUtbWVudS1idG4nO1xyXG4gICAgbW9iaWxlTWVudUJ0bi5pbm5lckhUTUwgPSAnPHNwYW4+PC9zcGFuPjxzcGFuPjwvc3Bhbj48c3Bhbj48L3NwYW4+JztcclxuICAgIFxyXG4gICAgY29uc3QgbmF2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW4tbmF2Jyk7XHJcbiAgICBuYXYuaW5zZXJ0QmVmb3JlKG1vYmlsZU1lbnVCdG4sIG5hdi5maXJzdENoaWxkKTtcclxuICAgIFxyXG4gICAgbW9iaWxlTWVudUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXYtbGlua3MnKS5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcclxuICAgICAgICB0aGlzLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g0J/Qu9Cw0LLQtdC9INGB0LrRgNC+0Lsg0L/RgNC4INC60LvQuNC6INCy0YrRgNGF0YMg0LvQuNC90LrQvtCy0LUg0LIg0LzQtdC90Y7RgtC+XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmF2LWxpbmtzIGEnKS5mb3JFYWNoKGxpbmsgPT4ge1xyXG4gICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhyZWYgPSB0aGlzLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xyXG4gICAgICAgICAgICBpZiAoaHJlZi5zdGFydHNXaXRoKCcjJykpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoaHJlZik7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDQkNC90LjQvNCw0YbQuNGPINC90LAg0YXQtdC00YrRgNCwINC/0YDQuCDRgdC60YDQvtC7XHJcbiAgICBsZXQgbGFzdFNjcm9sbCA9IDA7XHJcbiAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi1oZWFkZXInKTtcclxuICAgIFxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRTY3JvbGwgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGN1cnJlbnRTY3JvbGwgPD0gMCkge1xyXG4gICAgICAgICAgICBoZWFkZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2Nyb2xsLXVwJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGN1cnJlbnRTY3JvbGwgPiBsYXN0U2Nyb2xsICYmICFoZWFkZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdzY3JvbGwtZG93bicpKSB7XHJcbiAgICAgICAgICAgIC8vINCh0LrRgNC+0Lsg0L3QsNC00L7Qu9GDXHJcbiAgICAgICAgICAgIGhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKCdzY3JvbGwtdXAnKTtcclxuICAgICAgICAgICAgaGVhZGVyLmNsYXNzTGlzdC5hZGQoJ3Njcm9sbC1kb3duJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50U2Nyb2xsIDwgbGFzdFNjcm9sbCAmJiBoZWFkZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdzY3JvbGwtZG93bicpKSB7XHJcbiAgICAgICAgICAgIC8vINCh0LrRgNC+0Lsg0L3QsNCz0L7RgNC1XHJcbiAgICAgICAgICAgIGhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKCdzY3JvbGwtZG93bicpO1xyXG4gICAgICAgICAgICBoZWFkZXIuY2xhc3NMaXN0LmFkZCgnc2Nyb2xsLXVwJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxhc3RTY3JvbGwgPSBjdXJyZW50U2Nyb2xsO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gTGF6eSBsb2FkaW5nINC90LAg0LjQt9C+0LHRgNCw0LbQtdC90LjRj1xyXG4gICAgY29uc3QgaW1hZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW1nW2RhdGEtc3JjXScpO1xyXG4gICAgY29uc3QgaW1hZ2VPcHRpb25zID0ge1xyXG4gICAgICAgIHRocmVzaG9sZDogMCxcclxuICAgICAgICByb290TWFyZ2luOiAnMHB4IDBweCA1MHB4IDBweCdcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaW1hZ2VPYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGltZyA9IGVudHJ5LnRhcmdldDtcclxuICAgICAgICAgICAgICAgIGltZy5zcmMgPSBpbWcuZGF0YXNldC5zcmM7XHJcbiAgICAgICAgICAgICAgICBpbWcuY2xhc3NMaXN0LmFkZCgnbG9hZGVkJyk7XHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoaW1nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgaW1hZ2VPcHRpb25zKTtcclxuXHJcbiAgICBpbWFnZXMuZm9yRWFjaChpbWcgPT4gaW1hZ2VPYnNlcnZlci5vYnNlcnZlKGltZykpO1xyXG5cclxuICAgIC8vINCQ0L3QuNC80LDRhtC40Lgg0L/RgNC4INGB0LrRgNC+0LtcclxuICAgIGNvbnN0IGFuaW1hdGVkRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYW5pbWF0ZS1vbi1zY3JvbGwnKTtcclxuICAgIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSB7XHJcbiAgICAgICAgdGhyZXNob2xkOiAwLjJcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgYW5pbWF0aW9uT2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcclxuICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgIGVudHJ5LnRhcmdldC5jbGFzc0xpc3QuYWRkKCdhbmltYXRlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBhbmltYXRpb25PcHRpb25zKTtcclxuXHJcbiAgICBhbmltYXRlZEVsZW1lbnRzLmZvckVhY2goZWwgPT4gYW5pbWF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShlbCkpO1xyXG5cclxuICAgIC8vINCS0LDQu9C40LTQsNGG0LjRjyDQvdCwINGE0L7RgNC80LDRgtCwINC30LAg0LrQvtC90YLQsNC60YJcclxuICAgIGNvbnN0IGNvbnRhY3RGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRhY3QtZm9ybScpO1xyXG4gICAgaWYgKGNvbnRhY3RGb3JtKSB7XHJcbiAgICAgICAgY29udGFjdEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5xdWVyeVNlbGVjdG9yKCdbbmFtZT1cIm5hbWVcIl0nKS52YWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgZW1haWwgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwiZW1haWxcIl0nKS52YWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHRoaXMucXVlcnlTZWxlY3RvcignW25hbWU9XCJtZXNzYWdlXCJdJykudmFsdWU7XHJcbiAgICAgICAgICAgIGxldCBpc1ZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vINCY0LfRh9C40YHRgtCy0LDQvdC1INC90LAg0L/RgNC10LTQuNGI0L3QuCDQs9GA0LXRiNC60LhcclxuICAgICAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yQWxsKCcuZXJyb3ItbWVzc2FnZScpLmZvckVhY2goZWwgPT4gZWwucmVtb3ZlKCkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8g0JLQsNC70LjQtNCw0YbQuNGPINC90LAg0LjQvNC1XHJcbiAgICAgICAgICAgIGlmIChuYW1lLnRyaW0oKS5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICAgICAgICBzaG93RXJyb3IodGhpcy5xdWVyeVNlbGVjdG9yKCdbbmFtZT1cIm5hbWVcIl0nKSwgJ9Cc0L7Qu9GPLCDQstGK0LLQtdC00LXRgtC1INCy0LDQu9C40LTQvdC+INC40LzQtScpO1xyXG4gICAgICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyDQktCw0LvQuNC00LDRhtC40Y8g0L3QsCDQuNC80LXQudC7XHJcbiAgICAgICAgICAgIGlmICghaXNWYWxpZEVtYWlsKGVtYWlsKSkge1xyXG4gICAgICAgICAgICAgICAgc2hvd0Vycm9yKHRoaXMucXVlcnlTZWxlY3RvcignW25hbWU9XCJlbWFpbFwiXScpLCAn0JzQvtC70Y8sINCy0YrQstC10LTQtdGC0LUg0LLQsNC70LjQtNC10L0g0LjQvNC10LnQuyDQsNC00YDQtdGBJyk7XHJcbiAgICAgICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vINCS0LDQu9C40LTQsNGG0LjRjyDQvdCwINGB0YrQvtCx0YnQtdC90LjQtVxyXG4gICAgICAgICAgICBpZiAobWVzc2FnZS50cmltKCkubGVuZ3RoIDwgMTApIHtcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcih0aGlzLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwibWVzc2FnZVwiXScpLCAn0KHRitC+0LHRidC10L3QuNC10YLQviDRgtGA0Y/QsdCy0LAg0LTQsCDQsdGK0LTQtSDQv9C+0L3QtSAxMCDRgdC40LzQstC+0LvQsCcpO1xyXG4gICAgICAgICAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoaXNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgLy8g0JjQt9C/0YDQsNGJ0LDQvdC1INC90LAg0YTQvtGA0LzQsNGC0LBcclxuICAgICAgICAgICAgICAgIHRoaXMuc3VibWl0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhbmltYXRlTnVtYmVycygpO1xyXG5cclxuICAgIGluaXRBYm91dEFuaW1hdGlvbnMoKTtcclxuXHJcbiAgICBpbml0U2VhcmNoUGFnZSgpO1xyXG59KTtcclxuXHJcbi8vINCf0L7QvNC+0YnQvdC4INGE0YPQvdC60YbQuNC4XHJcbmZ1bmN0aW9uIGlzVmFsaWRFbWFpbChlbWFpbCkge1xyXG4gICAgY29uc3QgcmUgPSAvXigoW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31dKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcclxuICAgIHJldHVybiByZS50ZXN0KFN0cmluZyhlbWFpbCkudG9Mb3dlckNhc2UoKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3dFcnJvcihpbnB1dCwgbWVzc2FnZSkge1xyXG4gICAgY29uc3QgZXJyb3JEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGVycm9yRGl2LmNsYXNzTmFtZSA9ICdlcnJvci1tZXNzYWdlJztcclxuICAgIGVycm9yRGl2LnRleHRDb250ZW50ID0gbWVzc2FnZTtcclxuICAgIGlucHV0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVycm9yRGl2LCBpbnB1dC5uZXh0U2libGluZyk7XHJcbiAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdlcnJvcicpO1xyXG59XHJcblxyXG4vLyDQlNC+0LHQsNCy0Y/QvdC1INC90LAg0LTQvtC/0YrQu9C90LjRgtC10LvQvdC4INGB0YLQuNC70L7QstC1INC30LAg0LzQvtCx0LjQu9C90L7RgtC+INC80LXQvdGOXHJcbmNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcclxuc3R5bGUudGV4dENvbnRlbnQgPSBgXHJcbiAgICAubW9iaWxlLW1lbnUtYnRuIHtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICAgIGJhY2tncm91bmQ6IG5vbmU7XHJcbiAgICAgICAgYm9yZGVyOiBub25lO1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgfVxyXG5cclxuICAgIC5tb2JpbGUtbWVudS1idG4gc3BhbiB7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgd2lkdGg6IDI1cHg7XHJcbiAgICAgICAgaGVpZ2h0OiAzcHg7XHJcbiAgICAgICAgYmFja2dyb3VuZDogIzMzMztcclxuICAgICAgICBtYXJnaW46IDVweCAwO1xyXG4gICAgICAgIHRyYW5zaXRpb246IDAuM3M7XHJcbiAgICB9XHJcblxyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XHJcbiAgICAgICAgLm1vYmlsZS1tZW51LWJ0biB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLm5hdi1saW5rcyB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgICAgICAgICAgdG9wOiA3MHB4O1xyXG4gICAgICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgICAgICByaWdodDogMDtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogI2ZmZjtcclxuICAgICAgICAgICAgcGFkZGluZzogMjBweDtcclxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwMCUpO1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC5uYXYtbGlua3MuYWN0aXZlIHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLm1vYmlsZS1tZW51LWJ0bi5hY3RpdmUgc3BhbjpudGgtY2hpbGQoMSkge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZykgdHJhbnNsYXRlKDVweCwgNXB4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC5tb2JpbGUtbWVudS1idG4uYWN0aXZlIHNwYW46bnRoLWNoaWxkKDIpIHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC5tb2JpbGUtbWVudS1idG4uYWN0aXZlIHNwYW46bnRoLWNoaWxkKDMpIHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKSB0cmFuc2xhdGUoN3B4LCAtN3B4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbmA7XHJcblxyXG5kb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcclxuXHJcbmZ1bmN0aW9uIGFuaW1hdGVOdW1iZXJzKCkge1xyXG4gICAgY29uc3Qgc3RhdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc3RhdC1udW1iZXInKTtcclxuICAgIFxyXG4gICAgc3RhdHMuZm9yRWFjaChzdGF0ID0+IHtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBwYXJzZUludChzdGF0LnRleHRDb250ZW50KTtcclxuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IDI1MDA7IC8vINCj0LLQtdC70LjRh9Cw0LLQsNC80LUg0L/RgNC+0LTRitC70LbQuNGC0LXQu9C90L7RgdGC0YLQsFxyXG4gICAgICAgIGNvbnN0IGZyYW1lcyA9IDYwO1xyXG4gICAgICAgIGNvbnN0IHN0ZXAgPSB0YXJnZXQgLyAoZHVyYXRpb24gLyAoMTAwMCAvIGZyYW1lcykpO1xyXG4gICAgICAgIGxldCBjdXJyZW50ID0gMDtcclxuICAgICAgICBcclxuICAgICAgICBmdW5jdGlvbiBlYXNlT3V0UXVhcnQoeCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMSAtIE1hdGgucG93KDEgLSB4LCA0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlTnVtYmVyKHRpbWVzdGFtcCkge1xyXG4gICAgICAgICAgICBpZiAoIXVwZGF0ZU51bWJlci5zdGFydFRpbWUpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZU51bWJlci5zdGFydFRpbWUgPSB0aW1lc3RhbXA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGVsYXBzZWQgPSB0aW1lc3RhbXAgLSB1cGRhdGVOdW1iZXIuc3RhcnRUaW1lO1xyXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWluKGVsYXBzZWQgLyBkdXJhdGlvbiwgMSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjdXJyZW50ID0gTWF0aC5yb3VuZCh0YXJnZXQgKiBlYXNlT3V0UXVhcnQocHJvZ3Jlc3MpKTtcclxuICAgICAgICAgICAgc3RhdC50ZXh0Q29udGVudCA9IGN1cnJlbnQgKyAnKyc7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAocHJvZ3Jlc3MgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlTnVtYmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xyXG4gICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZU51bWJlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnkudGFyZ2V0LmNsb3Nlc3QoJy5zdGF0LWl0ZW0nKS5jbGFzc0xpc3QuYWRkKCdhbmltYXRlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LCB7IHRocmVzaG9sZDogMC41IH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoc3RhdCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy8g0JDQvdC40LzQsNGG0LjQuCDQv9GA0Lgg0YHQutGA0L7Qu9Cy0LDQvdC1INC30LAgQWJvdXQg0YHRgtGA0LDQvdC40YbQsNGC0LBcclxuZnVuY3Rpb24gaW5pdEFib3V0QW5pbWF0aW9ucygpIHtcclxuICAgIGNvbnN0IGFib3V0Q29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hYm91dC1jb250ZW50Jyk7XHJcbiAgICBjb25zdCB3aHlVc0l0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLndoeS11cy1pdGVtJyk7XHJcbiAgICBjb25zdCB0ZWFtTWVtYmVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50ZWFtLW1lbWJlcicpO1xyXG4gICAgXHJcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xyXG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xyXG4gICAgICAgICAgICAgICAgZW50cnkudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGVkJyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vINCh0L/QtdGG0LjQsNC70L3QsCDQsNC90LjQvNCw0YbQuNGPINC30LAgV2h5IFVzINGB0LXQutGG0LjRj9GC0LBcclxuICAgICAgICAgICAgICAgIGlmIChlbnRyeS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd3aHktdXMtaXRlbScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsYXkgPSBBcnJheS5mcm9tKHdoeVVzSXRlbXMpLmluZGV4T2YoZW50cnkudGFyZ2V0KSAqIDIwMDtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeS50YXJnZXQuc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gYCR7ZGVsYXl9bXNgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyDQodC/0LXRhtC40LDQu9C90LAg0LDQvdC40LzQsNGG0LjRjyDQt9CwINC10LrQuNC/0LBcclxuICAgICAgICAgICAgICAgIGlmIChlbnRyeS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0ZWFtLW1lbWJlcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsYXkgPSBBcnJheS5mcm9tKHRlYW1NZW1iZXJzKS5pbmRleE9mKGVudHJ5LnRhcmdldCkgKiAyMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnkudGFyZ2V0LnN0eWxlLnRyYW5zaXRpb25EZWxheSA9IGAke2RlbGF5fW1zYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sIHsgdGhyZXNob2xkOiAwLjIgfSk7XHJcbiAgICBcclxuICAgIGlmIChhYm91dENvbnRlbnQpIG9ic2VydmVyLm9ic2VydmUoYWJvdXRDb250ZW50KTtcclxuICAgIHdoeVVzSXRlbXMuZm9yRWFjaChpdGVtID0+IG9ic2VydmVyLm9ic2VydmUoaXRlbSkpO1xyXG4gICAgdGVhbU1lbWJlcnMuZm9yRWFjaChtZW1iZXIgPT4gb2JzZXJ2ZXIub2JzZXJ2ZShtZW1iZXIpKTtcclxuICAgIFxyXG4gICAgLy8g0JTQvtCx0LDQstGP0L3QtSDQvdCwIGZsb2F0aW5nINC10YTQtdC60YJcclxuICAgIGNvbnN0IGZsb2F0aW5nRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmxvYXRpbmcnKTtcclxuICAgIGZsb2F0aW5nRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICBlbGVtZW50LnN0eWxlLmFuaW1hdGlvbkRlbGF5ID0gTWF0aC5yYW5kb20oKSAqIDIgKyAncyc7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g0JDQvdC40LzQsNGG0LjRjyDQvdCwIHNraWxsIGJhcnNcclxuICAgIGNvbnN0IHNraWxsQmFycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5za2lsbC1wcm9ncmVzcycpO1xyXG4gICAgY29uc3Qgc2tpbGxPYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xyXG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBlbnRyeS50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHByb2dyZXNzLmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3Muc3R5bGUudHJhbnNmb3JtID0gYHNjYWxlWCgke3ZhbHVlIC8gMTAwfSlgO1xyXG4gICAgICAgICAgICAgICAgc2tpbGxPYnNlcnZlci51bm9ic2VydmUocHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCB7IHRocmVzaG9sZDogMC41IH0pO1xyXG4gICAgXHJcbiAgICBza2lsbEJhcnMuZm9yRWFjaChiYXIgPT4gc2tpbGxPYnNlcnZlci5vYnNlcnZlKGJhcikpO1xyXG4gICAgXHJcbiAgICAvLyDQn9Cw0YDQsNC70LDQutGBINC10YTQtdC60YIg0LfQsCBBYm91dCDRgdC10LrRhtC40Y/RgtCwXHJcbiAgICBjb25zdCBhYm91dFNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWJvdXQtc2VjdGlvbicpO1xyXG4gICAgaWYgKGFib3V0U2VjdGlvbikge1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbGVkID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG4gICAgICAgICAgICBjb25zdCByYXRlID0gc2Nyb2xsZWQgKiAwLjE1O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBhYm91dFNlY3Rpb24ucXVlcnlTZWxlY3RvcignLmFib3V0LWltYWdlJyk7XHJcbiAgICAgICAgICAgIGlmIChpbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgaW1hZ2Uuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsICR7cmF0ZX1weCwgMClgO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlUGFydGljbGVzKCk7XHJcbiAgICBpbml0VGltZWxpbmVBbmltYXRpb24oKTtcclxuICAgIGluaXQzRENhcmRFZmZlY3QoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlUGFydGljbGVzKCkge1xyXG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhcnRpY2xlcy1jb250YWluZXInKTtcclxuICAgIGlmICghY29udGFpbmVyKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgcGFydGljbGVDb3VudCA9IDIwO1xyXG4gICAgXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRpY2xlQ291bnQ7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHBhcnRpY2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgcGFydGljbGUuY2xhc3NOYW1lID0gJ3BhcnRpY2xlJztcclxuICAgICAgICBcclxuICAgICAgICAvLyDQodC70YPRh9Cw0LnQvdC+INC/0L7Qt9C40YbQuNC+0L3QuNGA0LDQvdC1XHJcbiAgICAgICAgcGFydGljbGUuc3R5bGUubGVmdCA9IE1hdGgucmFuZG9tKCkgKiAxMDAgKyAnJSc7XHJcbiAgICAgICAgcGFydGljbGUuc3R5bGUudG9wID0gTWF0aC5yYW5kb20oKSAqIDEwMCArICclJztcclxuICAgICAgICBcclxuICAgICAgICAvLyDQodC70YPRh9Cw0LnQvdC+INC30LDQutGK0YHQvdC10L3QuNC1INC90LAg0LDQvdC40LzQsNGG0LjRj9GC0LBcclxuICAgICAgICBwYXJ0aWNsZS5zdHlsZS5hbmltYXRpb25EZWxheSA9IE1hdGgucmFuZG9tKCkgKiA1ICsgJ3MnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChwYXJ0aWNsZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRUaW1lbGluZUFuaW1hdGlvbigpIHtcclxuICAgIGNvbnN0IHRpbWVsaW5lSXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGltZWxpbmUtaXRlbScpO1xyXG4gICAgXHJcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xyXG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xyXG4gICAgICAgICAgICAgICAgZW50cnkudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGVkJyk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vINCU0L7QsdCw0LLRj9C80LUg0LfQsNC60YrRgdC90LXQvdC40LUg0LfQsCDQv9C+0YHQu9C10LTQvtCy0LDRgtC10LvQvdC+INC/0L7Rj9Cy0Y/QstCw0L3QtVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBBcnJheS5mcm9tKHRpbWVsaW5lSXRlbXMpLmluZGV4T2YoZW50cnkudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGVudHJ5LnRhcmdldC5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSBgJHtpbmRleCAqIDIwMH1tc2A7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCB7IHRocmVzaG9sZDogMC4yIH0pO1xyXG4gICAgXHJcbiAgICB0aW1lbGluZUl0ZW1zLmZvckVhY2goaXRlbSA9PiBvYnNlcnZlci5vYnNlcnZlKGl0ZW0pKTtcclxufVxyXG5cclxuLy8gM0QgQ2FyZCBFZmZlY3RcclxuZnVuY3Rpb24gaW5pdDNEQ2FyZEVmZmVjdCgpIHtcclxuICAgIGNvbnN0IGNhcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFib3V0LWNhcmQnKTtcclxuICAgIFxyXG4gICAgY2FyZHMuZm9yRWFjaChjYXJkID0+IHtcclxuICAgICAgICBjYXJkLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBjYXJkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICBjb25zdCB4ID0gZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgICAgICBjb25zdCB5ID0gZS5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBjZW50ZXJYID0gcmVjdC53aWR0aCAvIDI7XHJcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlclkgPSByZWN0LmhlaWdodCAvIDI7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCByb3RhdGVYID0gKHkgLSBjZW50ZXJZKSAvIDIwO1xyXG4gICAgICAgICAgICBjb25zdCByb3RhdGVZID0gKGNlbnRlclggLSB4KSAvIDIwO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY2FyZC5zdHlsZS50cmFuc2Zvcm0gPSBgXHJcbiAgICAgICAgICAgICAgICBwZXJzcGVjdGl2ZSgxMDAwcHgpXHJcbiAgICAgICAgICAgICAgICByb3RhdGVYKCR7cm90YXRlWH1kZWcpXHJcbiAgICAgICAgICAgICAgICByb3RhdGVZKCR7cm90YXRlWX1kZWcpXHJcbiAgICAgICAgICAgICAgICBzY2FsZTNkKDEuMDUsIDEuMDUsIDEuMDUpXHJcbiAgICAgICAgICAgIGA7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY2FyZC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjYXJkLnN0eWxlLnRyYW5zZm9ybSA9ICdub25lJztcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vLyDQpNGD0L3QutGG0LjQvtC90LDQu9C90L7RgdGC0Lgg0LfQsCDRgdGC0YDQsNC90LjRhtCw0YLQsCDQt9CwINGC0YrRgNGB0LXQvdC1XHJcbmZ1bmN0aW9uIGluaXRTZWFyY2hQYWdlKCkge1xyXG4gICAgY29uc3QgZmlsdGVyc0Zvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVycy1mb3JtJyk7XHJcbiAgICBjb25zdCBhY3RpdmVGaWx0ZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFjdGl2ZS1maWx0ZXJzJyk7XHJcbiAgICBjb25zdCByYW5nZUlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9XCJudW1iZXJcIl0nKTtcclxuICAgIFxyXG4gICAgaWYgKCFmaWx0ZXJzRm9ybSkgcmV0dXJuO1xyXG5cclxuICAgIC8vINCQ0LLRgtC+0LzQsNGC0LjRh9C90L4g0LjQt9C/0YDQsNGJ0LDQvdC1INC90LAg0YTQvtGA0LzQsNGC0LAg0L/RgNC4INC/0YDQvtC80Y/QvdCwINC90LAg0YHQtdC70LXQutGCINC/0L7Qu9C10YLQsNGC0LBcclxuICAgIGZpbHRlcnNGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdCcpLmZvckVhY2goc2VsZWN0ID0+IHtcclxuICAgICAgICBzZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBmaWx0ZXJzRm9ybS5zdWJtaXQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vINCX0LDQsdCw0LLRj9C90LUg0L3QsCDQuNC30L/RgNCw0YnQsNC90LXRgtC+INC/0YDQuCDQstGK0LLQtdC20LTQsNC90LUg0LIg0L/QvtC70LXRgtCw0YLQsCDQt9CwINGG0LXQvdCwINC4INC/0LvQvtGJXHJcbiAgICBsZXQgdGltZW91dDtcclxuICAgIHJhbmdlSW5wdXRzLmZvckVhY2goaW5wdXQgPT4ge1xyXG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGZpbHRlcnNGb3JtLnN1Ym1pdCgpO1xyXG4gICAgICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vINCU0L7QsdCw0LLRj9C90LUg0L3QsCDQsNC60YLQuNCy0L3QuCDRhNC40LvRgtGA0Lgg0LrQsNGC0L4g0YLQsNCz0L7QstC1XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVBY3RpdmVGaWx0ZXJzKCkge1xyXG4gICAgICAgIGlmICghYWN0aXZlRmlsdGVycykgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGFjdGl2ZUZpbHRlcnMuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZmlsdGVyc0Zvcm0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBmb3JtRGF0YS5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlICYmIGtleSAhPT0gJ3BhZ2UnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgICAgICAgICB0YWcuY2xhc3NOYW1lID0gJ2ZpbHRlci10YWcnO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyDQktC30LXQvNCw0L3QtSDQvdCwINGC0LXQutGB0YLQsCDQvdCwINC40LfQsdGA0LDQvdCw0YLQsCDQvtC/0YbQuNGPINC30LAg0YHQtdC70LXQutGCINC/0L7Qu9C10YLQsNGC0LBcclxuICAgICAgICAgICAgICAgIGlmIChrZXkuaW5jbHVkZXMoJ3R5cGUnKSB8fCBrZXkuaW5jbHVkZXMoJ3N0YXR1cycpIHx8IGtleS5pbmNsdWRlcygnbG9jYXRpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdCA9IGZpbHRlcnNGb3JtLnF1ZXJ5U2VsZWN0b3IoYHNlbGVjdFtuYW1lPVwiJHtrZXl9XCJdYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbc2VsZWN0LnNlbGVjdGVkSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gb3B0aW9uLnRleHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRhZy5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgJHt2YWx1ZX1cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlbW92ZVwiIGRhdGEtZmlsdGVyPVwiJHtrZXl9XCI+w5c8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBhY3RpdmVGaWx0ZXJzLmFwcGVuZENoaWxkKHRhZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g0J/RgNC10LzQsNGF0LLQsNC90LUg0L3QsCDRhNC40LvRgtGK0YAg0L/RgNC4INC60LvQuNC6INCy0YrRgNGF0YMgWFxyXG4gICAgICAgIGFjdGl2ZUZpbHRlcnMucXVlcnlTZWxlY3RvckFsbCgnLnJlbW92ZScpLmZvckVhY2gocmVtb3ZlQnRuID0+IHtcclxuICAgICAgICAgICAgcmVtb3ZlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyTmFtZSA9IHJlbW92ZUJ0bi5kYXRhc2V0LmZpbHRlcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gZmlsdGVyc0Zvcm0ucXVlcnlTZWxlY3RvcihgW25hbWU9XCIke2ZpbHRlck5hbWV9XCJdYCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC50YWdOYW1lID09PSAnU0VMRUNUJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZpbHRlcnNGb3JtLnN1Ym1pdCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDQkNC90LjQvNCw0YbQuNGPINC90LAg0LrQsNGA0YLQuNGC0LUg0YEg0LjQvNC+0YLQuCDQv9GA0Lgg0YHQutGA0L7Qu9Cy0LDQvdC1XHJcbiAgICBmdW5jdGlvbiBhbmltYXRlUHJvcGVydHlDYXJkcygpIHtcclxuICAgICAgICBjb25zdCBjYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9wZXJ0eS1jYXJkJyk7XHJcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcclxuICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LnRhcmdldC5zdHlsZS5hbmltYXRpb24gPSAnZmFkZUluVXAgMC42cyBlYXNlIGZvcndhcmRzJztcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoZW50cnkudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgeyB0aHJlc2hvbGQ6IDAuMSB9KTtcclxuXHJcbiAgICAgICAgY2FyZHMuZm9yRWFjaChjYXJkID0+IHtcclxuICAgICAgICAgICAgY2FyZC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG4gICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGNhcmQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vINCS0LDQu9C40LTQsNGG0LjRjyDQvdCwINGG0LXQvdC+0LLQuNGC0LUg0LTQuNCw0L/QsNC30L7QvdC4XHJcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVJhbmdlcygpIHtcclxuICAgICAgICBjb25zdCBtaW5QcmljZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwibWluX3ByaWNlXCJdJyk7XHJcbiAgICAgICAgY29uc3QgbWF4UHJpY2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbmFtZT1cIm1heF9wcmljZVwiXScpO1xyXG4gICAgICAgIGNvbnN0IG1pbkFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbmFtZT1cIm1pbl9hcmVhXCJdJyk7XHJcbiAgICAgICAgY29uc3QgbWF4QXJlYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwibWF4X2FyZWFcIl0nKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVSYW5nZShtaW4sIG1heCkge1xyXG4gICAgICAgICAgICBpZiAoIW1pbiB8fCAhbWF4KSByZXR1cm47XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBtaW4uYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoTnVtYmVyKG1pbi52YWx1ZSkgPiBOdW1iZXIobWF4LnZhbHVlKSAmJiBtYXgudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBtaW4udmFsdWUgPSBtYXgudmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbWF4LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKE51bWJlcihtYXgudmFsdWUpIDwgTnVtYmVyKG1pbi52YWx1ZSkgJiYgbWluLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4LnZhbHVlID0gbWluLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhbGlkYXRlUmFuZ2UobWluUHJpY2UsIG1heFByaWNlKTtcclxuICAgICAgICB2YWxpZGF0ZVJhbmdlKG1pbkFyZWEsIG1heEFyZWEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vINCU0L7QsdCw0LLRj9C90LUg0L3QsCDRgdC+0YDRgtC40YDQsNC90LUg0YEg0LDQvdC40LzQsNGG0LjRj1xyXG4gICAgZnVuY3Rpb24gaW5pdFNvcnRpbmcoKSB7XHJcbiAgICAgICAgY29uc3Qgc29ydFNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zb3J0LXNlbGVjdCcpO1xyXG4gICAgICAgIGlmICghc29ydFNlbGVjdCkgcmV0dXJuO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHNvcnRTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9wZXJ0eS1jYXJkJyk7XHJcbiAgICAgICAgICAgIGNhcmRzLmZvckVhY2goY2FyZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjYXJkLnN0eWxlLmFuaW1hdGlvbiA9ICdmYWRlT3V0IDAuM3MgZWFzZSBmb3J3YXJkcyc7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBmaWx0ZXJzRm9ybS5zdWJtaXQoKSwgMzAwKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDQlNC+0LHQsNCy0Y/QvdC1INC90LAg0YTQuNC70YLRitGAINC30LAg0LfQsNC/0LDQt9C10L3QuCDQuNC80L7RgtC4XHJcbiAgICBmdW5jdGlvbiBpbml0RmF2b3JpdGVzKCkge1xyXG4gICAgICAgIGNvbnN0IGZhdm9yaXRlcyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Zhdm9yaXRlcycpIHx8ICdbXScpO1xyXG4gICAgICAgIGNvbnN0IGZhdm9yaXRlc0ZpbHRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYXZvcml0ZXMtZmlsdGVyJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGZhdm9yaXRlc0ZpbHRlcikge1xyXG4gICAgICAgICAgICBmYXZvcml0ZXNGaWx0ZXIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZhdm9yaXRlc0ZpbHRlci5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb3BlcnR5LWNhcmQnKS5mb3JFYWNoKGNhcmQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZhdm9yaXRlcy5pbmNsdWRlcyhjYXJkLmRhdGFzZXQuaWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb3BlcnR5LWNhcmQnKS5mb3JFYWNoKGNhcmQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8g0JTQvtCx0LDQstGP0L3QtSDQvdCwINC40L3RgtC10YDQsNC60YLQuNCy0L3QsCDQutCw0YDRgtCwINGBINC40LzQvtGC0LjRgtC1XHJcbiAgICBmdW5jdGlvbiBpbml0TWFwKCkge1xyXG4gICAgICAgIGNvbnN0IG1hcENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcm9wZXJ0aWVzLW1hcCcpO1xyXG4gICAgICAgIGlmICghbWFwQ29udGFpbmVyKSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IG1hcCA9IEwubWFwKG1hcENvbnRhaW5lcikuc2V0VmlldyhbNDIuNjk3NywgMjMuMzIxOV0sIDcpO1xyXG4gICAgICAgIEwudGlsZUxheWVyKCdodHRwczovL3tzfS50aWxlLm9wZW5zdHJlZXRtYXAub3JnL3t6fS97eH0ve3l9LnBuZycpLmFkZFRvKG1hcCk7XHJcblxyXG4gICAgICAgIC8vINCU0L7QsdCw0LLRj9C90LUg0L3QsCDQvNCw0YDQutC10YDQuCDQt9CwINCy0YHQtdC60Lgg0LjQvNC+0YJcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvcGVydHktY2FyZCcpLmZvckVhY2goY2FyZCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhdCA9IGNhcmQuZGF0YXNldC5sYXQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGxuZyA9IGNhcmQuZGF0YXNldC5sbmc7XHJcbiAgICAgICAgICAgIGlmIChsYXQgJiYgbG5nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXIgPSBMLm1hcmtlcihbbGF0LCBsbmddKS5hZGRUbyhtYXApO1xyXG4gICAgICAgICAgICAgICAgbWFya2VyLmJpbmRQb3B1cChgXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1hcC1wb3B1cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiR7Y2FyZC5xdWVyeVNlbGVjdG9yKCdpbWcnKS5zcmN9XCIgYWx0PVwiXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz4ke2NhcmQucXVlcnlTZWxlY3RvcignaDMnKS50ZXh0Q29udGVudH08L2gzPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cD4ke2NhcmQucXVlcnlTZWxlY3RvcignLnByaWNlJykudGV4dENvbnRlbnR9PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiJHtjYXJkLnF1ZXJ5U2VsZWN0b3IoJ2EnKS5ocmVmfVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtjYXJkLnF1ZXJ5U2VsZWN0b3IoJ2EnKS50ZXh0Q29udGVudH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDQlNC+0LHQsNCy0Y/QvdC1INC90LAg0YTQuNC70YLRgNC4INC30LAg0LTQvtC/0YrQu9C90LjRgtC10LvQvdC4INGF0LDRgNCw0LrRgtC10YDQuNGB0YLQuNC60LhcclxuICAgIGZ1bmN0aW9uIGluaXRBZHZhbmNlZEZpbHRlcnMoKSB7XHJcbiAgICAgICAgY29uc3QgYWR2YW5jZWRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWR2YW5jZWQtZmlsdGVycy1idG4nKTtcclxuICAgICAgICBjb25zdCBhZHZhbmNlZEZpbHRlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWR2YW5jZWQtZmlsdGVycycpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChhZHZhbmNlZEJ0biAmJiBhZHZhbmNlZEZpbHRlcnMpIHtcclxuICAgICAgICAgICAgYWR2YW5jZWRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhZHZhbmNlZEZpbHRlcnMuY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICBhZHZhbmNlZEJ0bi50ZXh0Q29udGVudCA9IGFkdmFuY2VkRmlsdGVycy5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpIFxyXG4gICAgICAgICAgICAgICAgICAgID8gJ9Ch0LrRgNC40Lkg0YTQuNC70YLRgNC4JyBcclxuICAgICAgICAgICAgICAgICAgICA6ICfQn9C+0LrQsNC20Lgg0L7RidC1INGE0LjQu9GC0YDQuCc7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDQlNC+0LHQsNCy0Y/QvdC1INC90LAg0YHRgNCw0LLQvdC10L3QuNC1INC90LAg0LjQvNC+0YLQuFxyXG4gICAgZnVuY3Rpb24gaW5pdENvbXBhcmUoKSB7XHJcbiAgICAgICAgY29uc3QgY29tcGFyZUNoZWNrYm94ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29tcGFyZS1jaGVja2JveCcpO1xyXG4gICAgICAgIGNvbnN0IGNvbXBhcmVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29tcGFyZS1idG4nKTtcclxuICAgICAgICBjb25zdCBjb21wYXJlTGlzdCA9IFtdO1xyXG5cclxuICAgICAgICBjb21wYXJlQ2hlY2tib3hlcy5mb3JFYWNoKGNoZWNrYm94ID0+IHtcclxuICAgICAgICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcGVydHlJZCA9IGNoZWNrYm94LmRhdGFzZXQuaWQ7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChjaGVja2JveC5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBhcmVMaXN0Lmxlbmd0aCA+PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ9Cc0L7QttC10YLQtSDQtNCwINGB0YDQsNCy0L3QuNGC0LUg0LzQsNC60YHQuNC80YPQvCAzINC40LzQvtGC0LAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb21wYXJlTGlzdC5wdXNoKHByb3BlcnR5SWQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNvbXBhcmVMaXN0LmluZGV4T2YocHJvcGVydHlJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIGNvbXBhcmVMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29tcGFyZUJ0bi5kaXNhYmxlZCA9IGNvbXBhcmVMaXN0Lmxlbmd0aCA8IDI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoY29tcGFyZUJ0bikge1xyXG4gICAgICAgICAgICBjb21wYXJlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBgY29tcGFyZS5waHA/aWRzPSR7Y29tcGFyZUxpc3Quam9pbignLCcpfWA7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDQvdCwINCy0YHQuNGH0LrQuCDRhNGD0L3QutGG0LjQvtC90LDQu9C90L7RgdGC0LhcclxuICAgIHVwZGF0ZUFjdGl2ZUZpbHRlcnMoKTtcclxuICAgIGFuaW1hdGVQcm9wZXJ0eUNhcmRzKCk7XHJcbiAgICB2YWxpZGF0ZVJhbmdlcygpO1xyXG4gICAgaW5pdFNvcnRpbmcoKTtcclxuICAgIGluaXRGYXZvcml0ZXMoKTtcclxuICAgIGluaXRNYXAoKTtcclxuICAgIGluaXRBZHZhbmNlZEZpbHRlcnMoKTtcclxuICAgIGluaXRDb21wYXJlKCk7XHJcbn1cclxuXHJcbi8vINCU0L7QsdCw0LLRj9C90LUg0LrRitC8INC+0YHQvdC+0LLQvdCw0YLQsCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjRj1xyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAvLyDQodGK0YnQtdGB0YLQstGD0LLQsNGJINC60L7QtC4uLlxyXG4gICAgXHJcbiAgICBpbml0U2VhcmNoUGFnZSgpO1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGluaXRQcm9wZXJ0eVBhZ2UoKSB7XHJcbiAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9wZXJ0eS1wYWdlJykpIHJldHVybjtcclxuICAgIFxyXG4gICAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0L3QsCBTd2lwZXIg0LPQsNC70LXRgNC40Y/RgtCwXHJcbiAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBuZXcgU3dpcGVyKCcudGh1bWJzLXN3aXBlcicsIHtcclxuICAgICAgICBzcGFjZUJldHdlZW46IDEwLFxyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcclxuICAgICAgICBmcmVlTW9kZTogdHJ1ZSxcclxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxyXG4gICAgICAgIGNlbnRlckluc3VmZmljaWVudFNsaWRlczogdHJ1ZVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbWFpblN3aXBlciA9IG5ldyBTd2lwZXIoJy5tYWluLXN3aXBlcicsIHtcclxuICAgICAgICBzcGFjZUJldHdlZW46IDEwLFxyXG4gICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgICAgbmV4dEVsOiAnLnN3aXBlci1idXR0b24tbmV4dCcsXHJcbiAgICAgICAgICAgIHByZXZFbDogJy5zd2lwZXItYnV0dG9uLXByZXYnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGh1bWJzOiB7XHJcbiAgICAgICAgICAgIHN3aXBlcjogdGh1bWJzU3dpcGVyXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0L3QsCDQutCw0YDRgtCw0YLQsFxyXG4gICAgY29uc3QgbWFwRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9wZXJ0eS1tYXAnKTtcclxuICAgIGlmIChtYXBFbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3QgbGF0ID0gcGFyc2VGbG9hdChtYXBFbGVtZW50LmRhdGFzZXQubGF0KTtcclxuICAgICAgICBjb25zdCBsbmcgPSBwYXJzZUZsb2F0KG1hcEVsZW1lbnQuZGF0YXNldC5sbmcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAobWFwRWxlbWVudCwge1xyXG4gICAgICAgICAgICBjZW50ZXI6IHsgbGF0LCBsbmcgfSxcclxuICAgICAgICAgICAgem9vbTogMTUsXHJcbiAgICAgICAgICAgIHN0eWxlczogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVUeXBlOiBcInBvaVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImxhYmVsc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcnM6IFt7IHZpc2liaWxpdHk6IFwib2ZmXCIgfV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcclxuICAgICAgICAgICAgcG9zaXRpb246IHsgbGF0LCBsbmcgfSxcclxuICAgICAgICAgICAgbWFwLFxyXG4gICAgICAgICAgICBpY29uOiB7XHJcbiAgICAgICAgICAgICAgICB1cmw6ICdhc3NldHMvaW1hZ2VzL21hcmtlci5wbmcnLFxyXG4gICAgICAgICAgICAgICAgc2NhbGVkU2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoNDAsIDQwKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g0KTRg9C90LrRhtC40L7QvdCw0LvQvdC+0YHRgiDQt9CwINC30LDQv9Cw0LfQstCw0L3QtSDQvdCwINC40LzQvtGCXHJcbiAgICBjb25zdCBzYXZlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNhdmUtcHJvcGVydHknKTtcclxuICAgIGlmIChzYXZlQnV0dG9uKSB7XHJcbiAgICAgICAgY29uc3QgcHJvcGVydHlJZCA9IHNhdmVCdXR0b24uZGF0YXNldC5pZDtcclxuICAgICAgICBjb25zdCBzYXZlZFByb3BlcnRpZXMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzYXZlZFByb3BlcnRpZXMnKSB8fCAnW10nKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoc2F2ZWRQcm9wZXJ0aWVzLmluY2x1ZGVzKHByb3BlcnR5SWQpKSB7XHJcbiAgICAgICAgICAgIHNhdmVCdXR0b24uY2xhc3NMaXN0LmFkZCgnc2F2ZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgc2F2ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHNhdmVkUHJvcGVydGllcy5pbmRleE9mKHByb3BlcnR5SWQpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgc2F2ZWRQcm9wZXJ0aWVzLnB1c2gocHJvcGVydHlJZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ3NhdmVkJyk7XHJcbiAgICAgICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKHRyYW5zbGF0aW9ucy5wcm9wZXJ0eV9zYXZlZCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzYXZlZFByb3BlcnRpZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnc2F2ZWQnKTtcclxuICAgICAgICAgICAgICAgIHNob3dOb3RpZmljYXRpb24odHJhbnNsYXRpb25zLnByb3BlcnR5X3JlbW92ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2F2ZWRQcm9wZXJ0aWVzJywgSlNPTi5zdHJpbmdpZnkoc2F2ZWRQcm9wZXJ0aWVzKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g0KTRg9C90LrRhtC40L7QvdCw0LvQvdC+0YHRgiDQt9CwINGB0L/QvtC00LXQu9GP0L3QtVxyXG4gICAgY29uc3Qgc2hhcmVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2hhcmUtcHJvcGVydHknKTtcclxuICAgIGlmIChzaGFyZUJ1dHRvbikge1xyXG4gICAgICAgIHNoYXJlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChuYXZpZ2F0b3Iuc2hhcmUpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbmF2aWdhdG9yLnNoYXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGRvY3VtZW50LnRpdGxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzaGFyaW5nOicsIGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBGYWxsYmFjayDQt9CwINCx0YDQsNGD0LfRitGA0Lgg0LHQtdC3IFdlYiBTaGFyZSBBUElcclxuICAgICAgICAgICAgICAgIGNvbnN0IGR1bW15ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZHVtbXkpO1xyXG4gICAgICAgICAgICAgICAgZHVtbXkudmFsdWUgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcclxuICAgICAgICAgICAgICAgIGR1bW15LnNlbGVjdCgpO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZHVtbXkpO1xyXG4gICAgICAgICAgICAgICAgc2hvd05vdGlmaWNhdGlvbign0JvQuNC90LrRitGCINC1INC60L7Qv9C40YDQsNC9INCyINC60LvQuNC/0LHQvtGA0LTQsCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g0KTRg9C90LrRhtC40L7QvdCw0LvQvdC+0YHRgiDQt9CwINC/0YDQuNC90YLQuNGA0LDQvdC1XHJcbiAgICBjb25zdCBwcmludEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcmludC1wcm9wZXJ0eScpO1xyXG4gICAgaWYgKHByaW50QnV0dG9uKSB7XHJcbiAgICAgICAgcHJpbnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgd2luZG93LnByaW50KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g0JLQsNC70LjQtNCw0YbQuNGPINC90LAg0LrQvtC90YLQsNC60YLQvdCw0YLQsCDRhNC+0YDQvNCwXHJcbiAgICBjb25zdCBjb250YWN0Rm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWN0LWZvcm0nKTtcclxuICAgIGlmIChjb250YWN0Rm9ybSkge1xyXG4gICAgICAgIGNvbnRhY3RGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEodGhpcyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmZXRjaCgnc2VuZC1pbnF1aXJ5LnBocCcsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgYm9keTogZm9ybURhdGFcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKGRhdGEubWVzc2FnZSwgJ2Vycm9yJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICBzaG93Tm90aWZpY2F0aW9uKCfQktGK0LfQvdC40LrQvdCwINCz0YDQtdGI0LrQsCDQv9GA0Lgg0LjQt9C/0YDQsNGJ0LDQvdC10YLQvicsICdlcnJvcicpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuLy8g0JTQvtCx0LDQstGP0L3QtSDQutGK0Lwg0L7RgdC90L7QstC90LDRgtCwINC40L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcclxuICAgIC8vINCh0YrRidC10YHRgtCy0YPQstCw0Ykg0LrQvtC0Li4uXHJcbiAgICBcclxuICAgIGluaXRQcm9wZXJ0eVBhZ2UoKTtcclxufSk7ICJdLCJuYW1lcyI6WyJpbml0aWFsaXplQXV0aCIsImluaXRpYWxpemVVSSIsImluaXRpYWxpemVOb3RpZmljYXRpb25zIiwiaW5pdGlhbGl6ZUJhY2t1cCIsImluaXRpYWxpemVTZXR0aW5ncyIsImluaXRpYWxpemVWYWxpZGF0aW9uIiwiaW5pdGlhbGl6ZUNoYXJ0cyIsImluaXRpYWxpemVGaWxlVXBsb2FkIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwibW9kdWxlUHJvbWlzZXMiLCJxdWVyeVNlbGVjdG9yIiwicHVzaCIsInRoZW4iLCJtb2R1bGUiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsIlByb21pc2UiLCJhbGwiLCJsb2ciLCJtb2JpbGVNZW51QnRuIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImlubmVySFRNTCIsIm5hdiIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImxpbmsiLCJlIiwiaHJlZiIsImdldEF0dHJpYnV0ZSIsInN0YXJ0c1dpdGgiLCJwcmV2ZW50RGVmYXVsdCIsInRhcmdldCIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJsYXN0U2Nyb2xsIiwiaGVhZGVyIiwid2luZG93IiwiY3VycmVudFNjcm9sbCIsInBhZ2VZT2Zmc2V0IiwicmVtb3ZlIiwiY29udGFpbnMiLCJhZGQiLCJpbWFnZXMiLCJpbWFnZU9wdGlvbnMiLCJ0aHJlc2hvbGQiLCJyb290TWFyZ2luIiwiaW1hZ2VPYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cmllcyIsIm9ic2VydmVyIiwiZW50cnkiLCJpc0ludGVyc2VjdGluZyIsImltZyIsInNyYyIsImRhdGFzZXQiLCJ1bm9ic2VydmUiLCJvYnNlcnZlIiwiYW5pbWF0ZWRFbGVtZW50cyIsImFuaW1hdGlvbk9wdGlvbnMiLCJhbmltYXRpb25PYnNlcnZlciIsImVsIiwiY29udGFjdEZvcm0iLCJuYW1lIiwidmFsdWUiLCJlbWFpbCIsIm1lc3NhZ2UiLCJpc1ZhbGlkIiwidHJpbSIsImxlbmd0aCIsInNob3dFcnJvciIsImlzVmFsaWRFbWFpbCIsInN1Ym1pdCIsImFuaW1hdGVOdW1iZXJzIiwiaW5pdEFib3V0QW5pbWF0aW9ucyIsImluaXRTZWFyY2hQYWdlIiwicmUiLCJ0ZXN0IiwiU3RyaW5nIiwidG9Mb3dlckNhc2UiLCJpbnB1dCIsImVycm9yRGl2IiwidGV4dENvbnRlbnQiLCJwYXJlbnROb2RlIiwibmV4dFNpYmxpbmciLCJzdHlsZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInN0YXRzIiwic3RhdCIsInBhcnNlSW50IiwiZHVyYXRpb24iLCJmcmFtZXMiLCJzdGVwIiwiY3VycmVudCIsImVhc2VPdXRRdWFydCIsIngiLCJNYXRoIiwicG93IiwidXBkYXRlTnVtYmVyIiwidGltZXN0YW1wIiwic3RhcnRUaW1lIiwiZWxhcHNlZCIsInByb2dyZXNzIiwibWluIiwicm91bmQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjbG9zZXN0IiwiYWJvdXRDb250ZW50Iiwid2h5VXNJdGVtcyIsInRlYW1NZW1iZXJzIiwiZGVsYXkiLCJBcnJheSIsImZyb20iLCJpbmRleE9mIiwidHJhbnNpdGlvbkRlbGF5IiwiY29uY2F0IiwiaXRlbSIsIm1lbWJlciIsImZsb2F0aW5nRWxlbWVudHMiLCJlbGVtZW50IiwiYW5pbWF0aW9uRGVsYXkiLCJyYW5kb20iLCJza2lsbEJhcnMiLCJza2lsbE9ic2VydmVyIiwidHJhbnNmb3JtIiwiYmFyIiwiYWJvdXRTZWN0aW9uIiwic2Nyb2xsZWQiLCJyYXRlIiwiaW1hZ2UiLCJjcmVhdGVQYXJ0aWNsZXMiLCJpbml0VGltZWxpbmVBbmltYXRpb24iLCJpbml0M0RDYXJkRWZmZWN0IiwiY29udGFpbmVyIiwicGFydGljbGVDb3VudCIsImkiLCJwYXJ0aWNsZSIsImxlZnQiLCJ0b3AiLCJ0aW1lbGluZUl0ZW1zIiwiaW5kZXgiLCJjYXJkcyIsImNhcmQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsInkiLCJjbGllbnRZIiwiY2VudGVyWCIsIndpZHRoIiwiY2VudGVyWSIsImhlaWdodCIsInJvdGF0ZVgiLCJyb3RhdGVZIiwiZmlsdGVyc0Zvcm0iLCJhY3RpdmVGaWx0ZXJzIiwicmFuZ2VJbnB1dHMiLCJzZWxlY3QiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInVwZGF0ZUFjdGl2ZUZpbHRlcnMiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwia2V5IiwidGFnIiwiaW5jbHVkZXMiLCJvcHRpb24iLCJvcHRpb25zIiwic2VsZWN0ZWRJbmRleCIsInRleHQiLCJyZW1vdmVCdG4iLCJmaWx0ZXJOYW1lIiwiZmlsdGVyIiwidGFnTmFtZSIsImFuaW1hdGVQcm9wZXJ0eUNhcmRzIiwiYW5pbWF0aW9uIiwib3BhY2l0eSIsInZhbGlkYXRlUmFuZ2VzIiwibWluUHJpY2UiLCJtYXhQcmljZSIsIm1pbkFyZWEiLCJtYXhBcmVhIiwidmFsaWRhdGVSYW5nZSIsIm1heCIsIk51bWJlciIsImluaXRTb3J0aW5nIiwic29ydFNlbGVjdCIsImluaXRGYXZvcml0ZXMiLCJmYXZvcml0ZXMiLCJKU09OIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiZmF2b3JpdGVzRmlsdGVyIiwiY2hlY2tlZCIsImlkIiwiZGlzcGxheSIsImluaXRNYXAiLCJtYXBDb250YWluZXIiLCJtYXAiLCJMIiwic2V0VmlldyIsInRpbGVMYXllciIsImFkZFRvIiwibGF0IiwibG5nIiwibWFya2VyIiwiYmluZFBvcHVwIiwiaW5pdEFkdmFuY2VkRmlsdGVycyIsImFkdmFuY2VkQnRuIiwiYWR2YW5jZWRGaWx0ZXJzIiwiaW5pdENvbXBhcmUiLCJjb21wYXJlQ2hlY2tib3hlcyIsImNvbXBhcmVCdG4iLCJjb21wYXJlTGlzdCIsImNoZWNrYm94IiwicHJvcGVydHlJZCIsImFsZXJ0Iiwic3BsaWNlIiwiZGlzYWJsZWQiLCJsb2NhdGlvbiIsImpvaW4iLCJpbml0UHJvcGVydHlQYWdlIiwidGh1bWJzU3dpcGVyIiwiU3dpcGVyIiwic3BhY2VCZXR3ZWVuIiwic2xpZGVzUGVyVmlldyIsImZyZWVNb2RlIiwid2F0Y2hTbGlkZXNQcm9ncmVzcyIsImNlbnRlckluc3VmZmljaWVudFNsaWRlcyIsIm1haW5Td2lwZXIiLCJuYXZpZ2F0aW9uIiwibmV4dEVsIiwicHJldkVsIiwidGh1bWJzIiwic3dpcGVyIiwibWFwRWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwicGFyc2VGbG9hdCIsImdvb2dsZSIsIm1hcHMiLCJNYXAiLCJjZW50ZXIiLCJ6b29tIiwic3R5bGVzIiwiZmVhdHVyZVR5cGUiLCJlbGVtZW50VHlwZSIsInN0eWxlcnMiLCJ2aXNpYmlsaXR5IiwiTWFya2VyIiwicG9zaXRpb24iLCJpY29uIiwidXJsIiwic2NhbGVkU2l6ZSIsIlNpemUiLCJzYXZlQnV0dG9uIiwic2F2ZWRQcm9wZXJ0aWVzIiwic2hvd05vdGlmaWNhdGlvbiIsInRyYW5zbGF0aW9ucyIsInByb3BlcnR5X3NhdmVkIiwicHJvcGVydHlfcmVtb3ZlZCIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJzaGFyZUJ1dHRvbiIsIm5hdmlnYXRvciIsInNoYXJlIiwidGl0bGUiLCJkdW1teSIsImJvZHkiLCJleGVjQ29tbWFuZCIsInJlbW92ZUNoaWxkIiwicHJpbnRCdXR0b24iLCJwcmludCIsImZldGNoIiwibWV0aG9kIiwicmVzcG9uc2UiLCJqc29uIiwiZGF0YSIsInN1Y2Nlc3MiLCJyZXNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./public/js/main.js\n");

/***/ }),

/***/ "./public/js/modules/auth.js":
/*!***********************************!*\
  !*** ./public/js/modules/auth.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   initializeAuth: () => (/* binding */ initializeAuth)\n/* harmony export */ });\n// Auth state\nlet currentUser = null;\n\n// Event handlers\nconst handleLogin = async event => {\n  event.preventDefault();\n  const form = event.target;\n  const email = form.querySelector('#email').value;\n  const password = form.querySelector('#password').value;\n  try {\n    const response = await login(email, password);\n    if (response.success) {\n      currentUser = response.user;\n      dispatchAuthEvent('login', currentUser);\n      redirectToDashboard();\n    }\n  } catch (error) {\n    handleAuthError(error);\n  }\n};\nconst handleLogout = async () => {\n  try {\n    await logout();\n    currentUser = null;\n    dispatchAuthEvent('logout');\n    redirectToLogin();\n  } catch (error) {\n    handleAuthError(error);\n  }\n};\n\n// API calls\nconst login = async (email, password) => {\n  const response = await fetch('/api/auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Login failed');\n  }\n  return response.json();\n};\nconst logout = async () => {\n  const response = await fetch('/api/auth/logout', {\n    method: 'POST'\n  });\n  if (!response.ok) {\n    throw new Error('Logout failed');\n  }\n  return response.json();\n};\n\n// Helper functions\nconst dispatchAuthEvent = function (type) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const event = new CustomEvent(\"auth:\".concat(type), {\n    detail: data,\n    bubbles: true\n  });\n  document.dispatchEvent(event);\n};\nconst handleAuthError = error => {\n  console.error('Auth error:', error);\n  dispatchAuthEvent('error', error.message);\n};\nconst redirectToDashboard = () => {\n  window.location.href = '/dashboard';\n};\nconst redirectToLogin = () => {\n  window.location.href = '/login';\n};\n\n// Initialize auth module\nconst initializeAuth = () => {\n  // Add event listeners\n  const loginForm = document.querySelector('#loginForm');\n  if (loginForm) {\n    loginForm.addEventListener('submit', handleLogin);\n  }\n  const logoutButton = document.querySelector('#logoutButton');\n  if (logoutButton) {\n    logoutButton.addEventListener('click', handleLogout);\n  }\n\n  // Check initial auth state\n  checkAuthState();\n};\n\n// Check current auth state\nconst checkAuthState = async () => {\n  try {\n    const response = await fetch('/api/auth/check');\n    const data = await response.json();\n    if (data.authenticated) {\n      currentUser = data.user;\n      dispatchAuthEvent('stateChange', currentUser);\n    } else {\n      currentUser = null;\n      dispatchAuthEvent('stateChange', null);\n    }\n  } catch (error) {\n    handleAuthError(error);\n  }\n};\n\n// Export auth module\nconst auth = {\n  getCurrentUser: () => currentUser,\n  isAuthenticated: () => currentUser !== null,\n  login,\n  logout,\n  checkAuthState\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/modules/auth.js\n");

/***/ }),

/***/ "./public/js/modules/backup.js":
/*!*************************************!*\
  !*** ./public/js/modules/backup.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   backup: () => (/* binding */ backup),\n/* harmony export */   initializeBackup: () => (/* binding */ initializeBackup)\n/* harmony export */ });\n/* harmony import */ var _ui_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.js */ \"./public/js/modules/ui.js\");\n// Import UI module for notifications\n\n\n// Backup state\nlet backups = [];\nlet isBackupInProgress = false;\n\n// Event handlers\nconst handleCreateBackup = async () => {\n  if (isBackupInProgress) {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('A backup is already in progress', 'warning');\n    return;\n  }\n  try {\n    isBackupInProgress = true;\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showLoading(document.querySelector('#backupSection'));\n    const response = await createBackup();\n    if (response.success) {\n      _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Backup created successfully', 'success');\n      await fetchBackups(); // Refresh the list\n    }\n  } catch (error) {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Failed to create backup', 'error');\n    console.error('Backup creation error:', error);\n  } finally {\n    isBackupInProgress = false;\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.hideLoading(document.querySelector('#backupSection'));\n  }\n};\nconst handleRestoreBackup = async backupId => {\n  if (!confirm('Are you sure you want to restore this backup? Current data will be overwritten.')) {\n    return;\n  }\n  try {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showLoading(document.querySelector('#backupSection'));\n    const response = await restoreBackup(backupId);\n    if (response.success) {\n      _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Backup restored successfully', 'success');\n      await fetchBackups(); // Refresh the list\n    }\n  } catch (error) {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Failed to restore backup', 'error');\n    console.error('Backup restore error:', error);\n  } finally {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.hideLoading(document.querySelector('#backupSection'));\n  }\n};\nconst handleDeleteBackup = async backupId => {\n  if (!confirm('Are you sure you want to delete this backup?')) {\n    return;\n  }\n  try {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showLoading(document.querySelector('#backupSection'));\n    const response = await deleteBackup(backupId);\n    if (response.success) {\n      _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Backup deleted successfully', 'success');\n      await fetchBackups(); // Refresh the list\n    }\n  } catch (error) {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Failed to delete backup', 'error');\n    console.error('Backup deletion error:', error);\n  } finally {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.hideLoading(document.querySelector('#backupSection'));\n  }\n};\nconst handleDownloadBackup = async backupId => {\n  try {\n    const response = await fetch(\"/api/backups/\".concat(backupId, \"/download\"));\n    if (!response.ok) throw new Error('Download failed');\n    const blob = await response.blob();\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = \"backup-\".concat(backupId, \".zip\");\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  } catch (error) {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Failed to download backup', 'error');\n    console.error('Backup download error:', error);\n  }\n};\n\n// API calls\nconst createBackup = async () => {\n  const response = await fetch('/api/backups', {\n    method: 'POST'\n  });\n  if (!response.ok) throw new Error('Failed to create backup');\n  return response.json();\n};\nconst restoreBackup = async backupId => {\n  const response = await fetch(\"/api/backups/\".concat(backupId, \"/restore\"), {\n    method: 'POST'\n  });\n  if (!response.ok) throw new Error('Failed to restore backup');\n  return response.json();\n};\nconst deleteBackup = async backupId => {\n  const response = await fetch(\"/api/backups/\".concat(backupId), {\n    method: 'DELETE'\n  });\n  if (!response.ok) throw new Error('Failed to delete backup');\n  return response.json();\n};\nconst fetchBackups = async () => {\n  try {\n    const response = await fetch('/api/backups');\n    if (!response.ok) throw new Error('Failed to fetch backups');\n    const data = await response.json();\n    backups = data.backups;\n    updateBackupsList();\n  } catch (error) {\n    console.error('Error fetching backups:', error);\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Failed to load backups', 'error');\n  }\n};\n\n// UI updates\nconst updateBackupsList = () => {\n  const container = document.querySelector('#backupsList');\n  if (!container) return;\n  container.innerHTML = backups.length ? backups.map(backup => \"\\n        <div class=\\\"backup-item\\\" data-id=\\\"\".concat(backup.id, \"\\\">\\n            <div class=\\\"backup-info\\\">\\n                <div class=\\\"backup-name\\\">\").concat(backup.name, \"</div>\\n                <div class=\\\"backup-date\\\">\").concat(formatDate(backup.created_at), \"</div>\\n                <div class=\\\"backup-size\\\">\").concat(formatSize(backup.size), \"</div>\\n            </div>\\n            <div class=\\\"backup-actions\\\">\\n                <button class=\\\"btn btn-sm btn-primary restore-backup\\\" \\n                        title=\\\"Restore this backup\\\">\\n                    <i class=\\\"icon-restore\\\"></i>\\n                </button>\\n                <button class=\\\"btn btn-sm btn-secondary download-backup\\\" \\n                        title=\\\"Download backup\\\">\\n                    <i class=\\\"icon-download\\\"></i>\\n                </button>\\n                <button class=\\\"btn btn-sm btn-danger delete-backup\\\" \\n                        title=\\\"Delete backup\\\">\\n                    <i class=\\\"icon-delete\\\"></i>\\n                </button>\\n            </div>\\n        </div>\\n    \")).join('') : '<div class=\"no-backups\">No backups available</div>';\n\n  // Add click handlers\n  container.querySelectorAll('.backup-item').forEach(item => {\n    var _item$querySelector, _item$querySelector2, _item$querySelector3;\n    const id = item.dataset.id;\n    (_item$querySelector = item.querySelector('.restore-backup')) === null || _item$querySelector === void 0 || _item$querySelector.addEventListener('click', () => handleRestoreBackup(id));\n    (_item$querySelector2 = item.querySelector('.download-backup')) === null || _item$querySelector2 === void 0 || _item$querySelector2.addEventListener('click', () => handleDownloadBackup(id));\n    (_item$querySelector3 = item.querySelector('.delete-backup')) === null || _item$querySelector3 === void 0 || _item$querySelector3.addEventListener('click', () => handleDeleteBackup(id));\n  });\n};\n\n// Helper functions\nconst formatDate = dateString => {\n  const date = new Date(dateString);\n  return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n};\nconst formatSize = bytes => {\n  const units = ['B', 'KB', 'MB', 'GB'];\n  let size = bytes;\n  let unitIndex = 0;\n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n  return \"\".concat(size.toFixed(1), \" \").concat(units[unitIndex]);\n};\n\n// Initialize backup module\nconst initializeBackup = () => {\n  // Fetch initial backups\n  fetchBackups();\n\n  // Add event listeners\n  const createBackupButton = document.querySelector('#createBackup');\n  if (createBackupButton) {\n    createBackupButton.addEventListener('click', handleCreateBackup);\n  }\n\n  // Set up automatic refresh\n  setInterval(fetchBackups, 300000); // Refresh every 5 minutes\n};\n\n// Export backup module\nconst backup = {\n  getAll: () => backups,\n  create: handleCreateBackup,\n  restore: handleRestoreBackup,\n  delete: handleDeleteBackup,\n  download: handleDownloadBackup,\n  isInProgress: () => isBackupInProgress\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/modules/backup.js\n");

/***/ }),

/***/ "./public/js/modules/charts.js":
/*!*************************************!*\
  !*** ./public/js/modules/charts.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   area: () => (/* binding */ createAreaChart),\n/* harmony export */   bar: () => (/* binding */ createBarChart),\n/* harmony export */   create: () => (/* binding */ createChart),\n/* harmony export */   destroy: () => (/* binding */ destroyChart),\n/* harmony export */   doughnut: () => (/* binding */ createDoughnutChart),\n/* harmony export */   formatNumber: () => (/* binding */ formatNumber),\n/* harmony export */   generateColors: () => (/* binding */ generateColors),\n/* harmony export */   initializeCharts: () => (/* binding */ initializeCharts),\n/* harmony export */   line: () => (/* binding */ createLineChart),\n/* harmony export */   pie: () => (/* binding */ createPieChart),\n/* harmony export */   update: () => (/* binding */ updateChart)\n/* harmony export */ });\n/* harmony import */ var chart_js_auto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chart.js/auto */ \"./node_modules/chart.js/auto/auto.js\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// Import Chart.js library\n\n\n// Chart instances\nconst charts = new Map();\n\n// Default chart options\nconst DEFAULT_OPTIONS = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    legend: {\n      position: 'bottom',\n      labels: {\n        padding: 20,\n        usePointStyle: true\n      }\n    },\n    tooltip: {\n      mode: 'index',\n      intersect: false,\n      padding: 12,\n      backgroundColor: 'rgba(0, 0, 0, 0.8)',\n      titleColor: '#fff',\n      bodyColor: '#fff',\n      borderColor: 'rgba(255, 255, 255, 0.1)',\n      borderWidth: 1\n    }\n  }\n};\n\n// Chart colors\nconst COLORS = {\n  primary: '#007bff',\n  success: '#28a745',\n  warning: '#ffc107',\n  danger: '#dc3545',\n  info: '#17a2b8',\n  secondary: '#6c757d'\n};\n\n// Chart types\nconst CHART_TYPES = {\n  LINE: 'line',\n  BAR: 'bar',\n  PIE: 'pie',\n  DOUGHNUT: 'doughnut',\n  AREA: 'line' // Area chart is a line chart with fill\n};\n\n// Create chart\nconst createChart = function (containerId, type, data) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const container = document.getElementById(containerId);\n  if (!container) {\n    console.error(\"Container with id '\".concat(containerId, \"' not found\"));\n    return null;\n  }\n\n  // Destroy existing chart if it exists\n  destroyChart(containerId);\n\n  // Create canvas element\n  const canvas = document.createElement('canvas');\n  container.appendChild(canvas);\n\n  // Merge default options with custom options\n  const chartOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n  // Create new chart\n  const chart = new chart_js_auto__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvas, {\n    type,\n    data,\n    options: chartOptions\n  });\n\n  // Store chart instance\n  charts.set(containerId, chart);\n  return chart;\n};\n\n// Update chart data\nconst updateChart = function (containerId, newData) {\n  let animate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const chart = charts.get(containerId);\n  if (!chart) {\n    console.error(\"Chart with id '\".concat(containerId, \"' not found\"));\n    return;\n  }\n  chart.data = _objectSpread(_objectSpread({}, chart.data), newData);\n  chart.update(animate ? 'default' : 'none');\n};\n\n// Destroy chart\nconst destroyChart = containerId => {\n  const chart = charts.get(containerId);\n  if (chart) {\n    chart.destroy();\n    charts.delete(containerId);\n  }\n};\n\n// Create line chart\nconst createLineChart = function (containerId, data) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    scales: {\n      y: {\n        beginAtZero: true,\n        grid: {\n          drawBorder: false\n        }\n      },\n      x: {\n        grid: {\n          display: false\n        }\n      }\n    }\n  };\n  return createChart(containerId, CHART_TYPES.LINE, data, _objectSpread(_objectSpread({}, defaultOptions), options));\n};\n\n// Create bar chart\nconst createBarChart = function (containerId, data) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    scales: {\n      y: {\n        beginAtZero: true,\n        grid: {\n          drawBorder: false\n        }\n      },\n      x: {\n        grid: {\n          display: false\n        }\n      }\n    }\n  };\n  return createChart(containerId, CHART_TYPES.BAR, data, _objectSpread(_objectSpread({}, defaultOptions), options));\n};\n\n// Create pie chart\nconst createPieChart = function (containerId, data) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    cutout: 0,\n    plugins: {\n      legend: {\n        position: 'bottom'\n      }\n    }\n  };\n  return createChart(containerId, CHART_TYPES.PIE, data, _objectSpread(_objectSpread({}, defaultOptions), options));\n};\n\n// Create doughnut chart\nconst createDoughnutChart = function (containerId, data) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    cutout: '60%',\n    plugins: {\n      legend: {\n        position: 'bottom'\n      }\n    }\n  };\n  return createChart(containerId, CHART_TYPES.DOUGHNUT, data, _objectSpread(_objectSpread({}, defaultOptions), options));\n};\n\n// Create area chart\nconst createAreaChart = function (containerId, data) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    scales: {\n      y: {\n        beginAtZero: true,\n        grid: {\n          drawBorder: false\n        }\n      },\n      x: {\n        grid: {\n          display: false\n        }\n      }\n    }\n  };\n\n  // Ensure all datasets have fill option\n  const modifiedData = _objectSpread(_objectSpread({}, data), {}, {\n    datasets: data.datasets.map(dataset => _objectSpread(_objectSpread({}, dataset), {}, {\n      fill: true\n    }))\n  });\n  return createChart(containerId, CHART_TYPES.AREA, modifiedData, _objectSpread(_objectSpread({}, defaultOptions), options));\n};\n\n// Helper functions\nconst generateColors = count => {\n  const baseColors = Object.values(COLORS);\n  const colors = [];\n  for (let i = 0; i < count; i++) {\n    colors.push(baseColors[i % baseColors.length]);\n  }\n  return colors;\n};\nconst formatNumber = number => {\n  if (number >= 1000000) {\n    return (number / 1000000).toFixed(1) + 'M';\n  }\n  if (number >= 1000) {\n    return (number / 1000).toFixed(1) + 'K';\n  }\n  return number.toString();\n};\n\n// Initialize charts module\nconst initializeCharts = () => {\n  // Add window resize handler for responsive charts\n  window.addEventListener('resize', () => {\n    charts.forEach(chart => {\n      chart.resize();\n    });\n  });\n\n  // Add theme change handler\n  document.addEventListener('themeChanged', () => {\n    charts.forEach(chart => {\n      updateChartTheme(chart);\n    });\n  });\n};\n\n// Update chart theme\nconst updateChartTheme = chart => {\n  var _chart$options$plugin;\n  const isDarkMode = document.body.classList.contains('dark-mode');\n  const textColor = isDarkMode ? '#ffffff' : '#666666';\n  const gridColor = isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';\n  if (chart.options.scales) {\n    Object.values(chart.options.scales).forEach(scale => {\n      if (scale.ticks) {\n        scale.ticks.color = textColor;\n      }\n      if (scale.grid) {\n        scale.grid.color = gridColor;\n      }\n    });\n  }\n  if ((_chart$options$plugin = chart.options.plugins) !== null && _chart$options$plugin !== void 0 && (_chart$options$plugin = _chart$options$plugin.legend) !== null && _chart$options$plugin !== void 0 && _chart$options$plugin.labels) {\n    chart.options.plugins.legend.labels.color = textColor;\n  }\n  chart.update();\n};\n\n// Export charts module\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/modules/charts.js\n");

/***/ }),

/***/ "./public/js/modules/fileUpload.js":
/*!*****************************************!*\
  !*** ./public/js/modules/fileUpload.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fileUpload: () => (/* binding */ fileUpload),\n/* harmony export */   initializeFileUpload: () => (/* binding */ initializeFileUpload)\n/* harmony export */ });\n/* harmony import */ var _ui_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.js */ \"./public/js/modules/ui.js\");\n// Import UI module for notifications\n\n\n// File upload state\nlet uploads = new Map();\nlet totalUploads = 0;\n\n// Supported file types\nconst SUPPORTED_TYPES = {\n  images: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],\n  documents: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],\n  spreadsheets: ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],\n  archives: ['application/zip', 'application/x-rar-compressed']\n};\n\n// File size limits (in bytes)\nconst SIZE_LIMITS = {\n  image: 5 * 1024 * 1024,\n  // 5MB\n  document: 10 * 1024 * 1024,\n  // 10MB\n  spreadsheet: 10 * 1024 * 1024,\n  // 10MB\n  archive: 50 * 1024 * 1024 // 50MB\n};\n\n// Event handlers\nconst handleFileSelect = event => {\n  const input = event.target;\n  const files = Array.from(input.files);\n  const uploaderId = input.dataset.uploader;\n\n  // Validate files\n  const validFiles = files.filter(file => validateFile(file));\n  if (validFiles.length !== files.length) {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Some files were rejected due to invalid type or size', 'warning');\n  }\n\n  // Start upload for valid files\n  validFiles.forEach(file => {\n    uploadFile(file, uploaderId);\n  });\n};\nconst handleDragOver = event => {\n  event.preventDefault();\n  event.currentTarget.classList.add('dragover');\n};\nconst handleDragLeave = event => {\n  event.preventDefault();\n  event.currentTarget.classList.remove('dragover');\n};\nconst handleDrop = event => {\n  event.preventDefault();\n  event.currentTarget.classList.remove('dragover');\n  const files = Array.from(event.dataTransfer.files);\n  const uploaderId = event.currentTarget.dataset.uploader;\n\n  // Validate files\n  const validFiles = files.filter(file => validateFile(file));\n  if (validFiles.length !== files.length) {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Some files were rejected due to invalid type or size', 'warning');\n  }\n\n  // Start upload for valid files\n  validFiles.forEach(file => {\n    uploadFile(file, uploaderId);\n  });\n};\n\n// File validation\nconst validateFile = file => {\n  // Check file type\n  const isValidType = Object.values(SUPPORTED_TYPES).flat().includes(file.type);\n  if (!isValidType) {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast(\"File type \".concat(file.type, \" is not supported\"), 'error');\n    return false;\n  }\n\n  // Check file size\n  const sizeLimit = getSizeLimit(file.type);\n  if (file.size > sizeLimit) {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast(\"File size exceeds the limit of \".concat(formatSize(sizeLimit)), 'error');\n    return false;\n  }\n  return true;\n};\nconst getSizeLimit = fileType => {\n  if (SUPPORTED_TYPES.images.includes(fileType)) return SIZE_LIMITS.image;\n  if (SUPPORTED_TYPES.documents.includes(fileType)) return SIZE_LIMITS.document;\n  if (SUPPORTED_TYPES.spreadsheets.includes(fileType)) return SIZE_LIMITS.spreadsheet;\n  if (SUPPORTED_TYPES.archives.includes(fileType)) return SIZE_LIMITS.archive;\n  return 0;\n};\n\n// File upload\nconst uploadFile = async (file, uploaderId) => {\n  const uploadId = ++totalUploads;\n  const upload = {\n    id: uploadId,\n    file,\n    progress: 0,\n    status: 'pending',\n    uploaderId\n  };\n  uploads.set(uploadId, upload);\n  createUploadElement(upload);\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await fetch('/api/upload', {\n      method: 'POST',\n      body: formData,\n      onUploadProgress: progressEvent => {\n        updateProgress(uploadId, progressEvent.loaded / progressEvent.total * 100);\n      }\n    });\n    if (!response.ok) throw new Error('Upload failed');\n    const result = await response.json();\n    completeUpload(uploadId, result);\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('File uploaded successfully', 'success');\n  } catch (error) {\n    failUpload(uploadId, error.message);\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Failed to upload file', 'error');\n  }\n};\n\n// UI updates\nconst createUploadElement = upload => {\n  const container = document.querySelector(\"#\".concat(upload.uploaderId, \" .upload-list\"));\n  if (!container) return;\n  const element = document.createElement('div');\n  element.className = 'upload-item';\n  element.dataset.uploadId = upload.id;\n  element.innerHTML = \"\\n        <div class=\\\"upload-info\\\">\\n            <div class=\\\"upload-name\\\">\".concat(upload.file.name, \"</div>\\n            <div class=\\\"upload-size\\\">\").concat(formatSize(upload.file.size), \"</div>\\n        </div>\\n        <div class=\\\"upload-progress\\\">\\n            <div class=\\\"progress-bar\\\" style=\\\"width: 0%\\\"></div>\\n        </div>\\n        <div class=\\\"upload-actions\\\">\\n            <button class=\\\"btn btn-sm btn-danger cancel-upload\\\" title=\\\"Cancel upload\\\">\\n                <i class=\\\"icon-cancel\\\"></i>\\n            </button>\\n        </div>\\n    \");\n\n  // Add cancel handler\n  element.querySelector('.cancel-upload').addEventListener('click', () => {\n    cancelUpload(upload.id);\n  });\n  container.appendChild(element);\n};\nconst updateProgress = (uploadId, progress) => {\n  const upload = uploads.get(uploadId);\n  if (!upload) return;\n  upload.progress = progress;\n  const element = document.querySelector(\"[data-upload-id=\\\"\".concat(uploadId, \"\\\"]\"));\n  if (element) {\n    const progressBar = element.querySelector('.progress-bar');\n    if (progressBar) {\n      progressBar.style.width = \"\".concat(progress, \"%\");\n    }\n  }\n};\nconst completeUpload = (uploadId, result) => {\n  const upload = uploads.get(uploadId);\n  if (!upload) return;\n  upload.status = 'complete';\n  upload.result = result;\n  const element = document.querySelector(\"[data-upload-id=\\\"\".concat(uploadId, \"\\\"]\"));\n  if (element) {\n    element.classList.add('complete');\n    element.querySelector('.upload-actions').innerHTML = \"\\n            <button class=\\\"btn btn-sm btn-success\\\" disabled>\\n                <i class=\\\"icon-check\\\"></i>\\n            </button>\\n        \";\n  }\n\n  // Remove from uploads map after animation\n  setTimeout(() => {\n    uploads.delete(uploadId);\n    element === null || element === void 0 || element.remove();\n  }, 3000);\n};\nconst failUpload = (uploadId, error) => {\n  const upload = uploads.get(uploadId);\n  if (!upload) return;\n  upload.status = 'failed';\n  upload.error = error;\n  const element = document.querySelector(\"[data-upload-id=\\\"\".concat(uploadId, \"\\\"]\"));\n  if (element) {\n    element.classList.add('failed');\n    element.querySelector('.upload-actions').innerHTML = \"\\n            <button class=\\\"btn btn-sm btn-danger\\\" disabled>\\n                <i class=\\\"icon-error\\\"></i>\\n            </button>\\n        \";\n  }\n};\nconst cancelUpload = uploadId => {\n  const upload = uploads.get(uploadId);\n  if (!upload) return;\n  upload.status = 'cancelled';\n  const element = document.querySelector(\"[data-upload-id=\\\"\".concat(uploadId, \"\\\"]\"));\n  if (element) {\n    element.remove();\n  }\n  uploads.delete(uploadId);\n};\n\n// Helper functions\nconst formatSize = bytes => {\n  const units = ['B', 'KB', 'MB', 'GB'];\n  let size = bytes;\n  let unitIndex = 0;\n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n  return \"\".concat(size.toFixed(1), \" \").concat(units[unitIndex]);\n};\n\n// Initialize file upload module\nconst initializeFileUpload = () => {\n  // Add event listeners to all file upload areas\n  document.querySelectorAll('.file-upload').forEach(uploader => {\n    const input = uploader.querySelector('input[type=\"file\"]');\n    const dropZone = uploader.querySelector('.drop-zone');\n    if (input) {\n      input.addEventListener('change', handleFileSelect);\n    }\n    if (dropZone) {\n      dropZone.addEventListener('dragover', handleDragOver);\n      dropZone.addEventListener('dragleave', handleDragLeave);\n      dropZone.addEventListener('drop', handleDrop);\n    }\n  });\n};\n\n// Export file upload module\nconst fileUpload = {\n  getUploads: () => Array.from(uploads.values()),\n  cancelUpload,\n  getSupportedTypes: () => SUPPORTED_TYPES,\n  getSizeLimits: () => SIZE_LIMITS\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUM7SUFDakQ7RUFDSixDQUFDLENBQUM7QUFDTixDQUFDOztBQUVEO0FBQ08sTUFBTWdFLFVBQVUsR0FBRztFQUN0QkMsVUFBVSxFQUFFQSxDQUFBLEtBQU1yRixLQUFLLENBQUNDLElBQUksQ0FBQ25CLE9BQU8sQ0FBQzBDLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDOUM2QyxZQUFZO0VBQ1ppQixpQkFBaUIsRUFBRUEsQ0FBQSxLQUFNckcsZUFBZTtFQUN4Q3NHLGFBQWEsRUFBRUEsQ0FBQSxLQUFNakc7QUFDekIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltb2JpbGllbi8uL3B1YmxpYy9qcy9tb2R1bGVzL2ZpbGVVcGxvYWQuanM/YzBhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnQgVUkgbW9kdWxlIGZvciBub3RpZmljYXRpb25zXHJcbmltcG9ydCB7IHVpIH0gZnJvbSAnLi91aS5qcyc7XHJcblxyXG4vLyBGaWxlIHVwbG9hZCBzdGF0ZVxyXG5sZXQgdXBsb2FkcyA9IG5ldyBNYXAoKTtcclxubGV0IHRvdGFsVXBsb2FkcyA9IDA7XHJcblxyXG4vLyBTdXBwb3J0ZWQgZmlsZSB0eXBlc1xyXG5jb25zdCBTVVBQT1JURURfVFlQRVMgPSB7XHJcbiAgICBpbWFnZXM6IFsnaW1hZ2UvanBlZycsICdpbWFnZS9wbmcnLCAnaW1hZ2UvZ2lmJywgJ2ltYWdlL3dlYnAnXSxcclxuICAgIGRvY3VtZW50czogWydhcHBsaWNhdGlvbi9wZGYnLCAnYXBwbGljYXRpb24vbXN3b3JkJywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50J10sXHJcbiAgICBzcHJlYWRzaGVldHM6IFsnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsJywgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0J10sXHJcbiAgICBhcmNoaXZlczogWydhcHBsaWNhdGlvbi96aXAnLCAnYXBwbGljYXRpb24veC1yYXItY29tcHJlc3NlZCddXHJcbn07XHJcblxyXG4vLyBGaWxlIHNpemUgbGltaXRzIChpbiBieXRlcylcclxuY29uc3QgU0laRV9MSU1JVFMgPSB7XHJcbiAgICBpbWFnZTogNSAqIDEwMjQgKiAxMDI0LCAvLyA1TUJcclxuICAgIGRvY3VtZW50OiAxMCAqIDEwMjQgKiAxMDI0LCAvLyAxME1CXHJcbiAgICBzcHJlYWRzaGVldDogMTAgKiAxMDI0ICogMTAyNCwgLy8gMTBNQlxyXG4gICAgYXJjaGl2ZTogNTAgKiAxMDI0ICogMTAyNCAvLyA1ME1CXHJcbn07XHJcblxyXG4vLyBFdmVudCBoYW5kbGVyc1xyXG5jb25zdCBoYW5kbGVGaWxlU2VsZWN0ID0gKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zdCBpbnB1dCA9IGV2ZW50LnRhcmdldDtcclxuICAgIGNvbnN0IGZpbGVzID0gQXJyYXkuZnJvbShpbnB1dC5maWxlcyk7XHJcbiAgICBjb25zdCB1cGxvYWRlcklkID0gaW5wdXQuZGF0YXNldC51cGxvYWRlcjtcclxuICAgIFxyXG4gICAgLy8gVmFsaWRhdGUgZmlsZXNcclxuICAgIGNvbnN0IHZhbGlkRmlsZXMgPSBmaWxlcy5maWx0ZXIoZmlsZSA9PiB2YWxpZGF0ZUZpbGUoZmlsZSkpO1xyXG4gICAgXHJcbiAgICBpZiAodmFsaWRGaWxlcy5sZW5ndGggIT09IGZpbGVzLmxlbmd0aCkge1xyXG4gICAgICAgIHVpLnNob3dUb2FzdCgnU29tZSBmaWxlcyB3ZXJlIHJlamVjdGVkIGR1ZSB0byBpbnZhbGlkIHR5cGUgb3Igc2l6ZScsICd3YXJuaW5nJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFN0YXJ0IHVwbG9hZCBmb3IgdmFsaWQgZmlsZXNcclxuICAgIHZhbGlkRmlsZXMuZm9yRWFjaChmaWxlID0+IHtcclxuICAgICAgICB1cGxvYWRGaWxlKGZpbGUsIHVwbG9hZGVySWQpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG5jb25zdCBoYW5kbGVEcmFnT3ZlciA9IChldmVudCkgPT4ge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmFkZCgnZHJhZ292ZXInKTtcclxufTtcclxuXHJcbmNvbnN0IGhhbmRsZURyYWdMZWF2ZSA9IChldmVudCkgPT4ge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZ292ZXInKTtcclxufTtcclxuXHJcbmNvbnN0IGhhbmRsZURyb3AgPSAoZXZlbnQpID0+IHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2RyYWdvdmVyJyk7XHJcbiAgICBcclxuICAgIGNvbnN0IGZpbGVzID0gQXJyYXkuZnJvbShldmVudC5kYXRhVHJhbnNmZXIuZmlsZXMpO1xyXG4gICAgY29uc3QgdXBsb2FkZXJJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC51cGxvYWRlcjtcclxuICAgIFxyXG4gICAgLy8gVmFsaWRhdGUgZmlsZXNcclxuICAgIGNvbnN0IHZhbGlkRmlsZXMgPSBmaWxlcy5maWx0ZXIoZmlsZSA9PiB2YWxpZGF0ZUZpbGUoZmlsZSkpO1xyXG4gICAgXHJcbiAgICBpZiAodmFsaWRGaWxlcy5sZW5ndGggIT09IGZpbGVzLmxlbmd0aCkge1xyXG4gICAgICAgIHVpLnNob3dUb2FzdCgnU29tZSBmaWxlcyB3ZXJlIHJlamVjdGVkIGR1ZSB0byBpbnZhbGlkIHR5cGUgb3Igc2l6ZScsICd3YXJuaW5nJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIFN0YXJ0IHVwbG9hZCBmb3IgdmFsaWQgZmlsZXNcclxuICAgIHZhbGlkRmlsZXMuZm9yRWFjaChmaWxlID0+IHtcclxuICAgICAgICB1cGxvYWRGaWxlKGZpbGUsIHVwbG9hZGVySWQpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG4vLyBGaWxlIHZhbGlkYXRpb25cclxuY29uc3QgdmFsaWRhdGVGaWxlID0gKGZpbGUpID0+IHtcclxuICAgIC8vIENoZWNrIGZpbGUgdHlwZVxyXG4gICAgY29uc3QgaXNWYWxpZFR5cGUgPSBPYmplY3QudmFsdWVzKFNVUFBPUlRFRF9UWVBFUylcclxuICAgICAgICAuZmxhdCgpXHJcbiAgICAgICAgLmluY2x1ZGVzKGZpbGUudHlwZSk7XHJcbiAgICAgICAgXHJcbiAgICBpZiAoIWlzVmFsaWRUeXBlKSB7XHJcbiAgICAgICAgdWkuc2hvd1RvYXN0KGBGaWxlIHR5cGUgJHtmaWxlLnR5cGV9IGlzIG5vdCBzdXBwb3J0ZWRgLCAnZXJyb3InKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGZpbGUgc2l6ZVxyXG4gICAgY29uc3Qgc2l6ZUxpbWl0ID0gZ2V0U2l6ZUxpbWl0KGZpbGUudHlwZSk7XHJcbiAgICBpZiAoZmlsZS5zaXplID4gc2l6ZUxpbWl0KSB7XHJcbiAgICAgICAgdWkuc2hvd1RvYXN0KGBGaWxlIHNpemUgZXhjZWVkcyB0aGUgbGltaXQgb2YgJHtmb3JtYXRTaXplKHNpemVMaW1pdCl9YCwgJ2Vycm9yJyk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbmNvbnN0IGdldFNpemVMaW1pdCA9IChmaWxlVHlwZSkgPT4ge1xyXG4gICAgaWYgKFNVUFBPUlRFRF9UWVBFUy5pbWFnZXMuaW5jbHVkZXMoZmlsZVR5cGUpKSByZXR1cm4gU0laRV9MSU1JVFMuaW1hZ2U7XHJcbiAgICBpZiAoU1VQUE9SVEVEX1RZUEVTLmRvY3VtZW50cy5pbmNsdWRlcyhmaWxlVHlwZSkpIHJldHVybiBTSVpFX0xJTUlUUy5kb2N1bWVudDtcclxuICAgIGlmIChTVVBQT1JURURfVFlQRVMuc3ByZWFkc2hlZXRzLmluY2x1ZGVzKGZpbGVUeXBlKSkgcmV0dXJuIFNJWkVfTElNSVRTLnNwcmVhZHNoZWV0O1xyXG4gICAgaWYgKFNVUFBPUlRFRF9UWVBFUy5hcmNoaXZlcy5pbmNsdWRlcyhmaWxlVHlwZSkpIHJldHVybiBTSVpFX0xJTUlUUy5hcmNoaXZlO1xyXG4gICAgcmV0dXJuIDA7XHJcbn07XHJcblxyXG4vLyBGaWxlIHVwbG9hZFxyXG5jb25zdCB1cGxvYWRGaWxlID0gYXN5bmMgKGZpbGUsIHVwbG9hZGVySWQpID0+IHtcclxuICAgIGNvbnN0IHVwbG9hZElkID0gKyt0b3RhbFVwbG9hZHM7XHJcbiAgICBjb25zdCB1cGxvYWQgPSB7XHJcbiAgICAgICAgaWQ6IHVwbG9hZElkLFxyXG4gICAgICAgIGZpbGUsXHJcbiAgICAgICAgcHJvZ3Jlc3M6IDAsXHJcbiAgICAgICAgc3RhdHVzOiAncGVuZGluZycsXHJcbiAgICAgICAgdXBsb2FkZXJJZFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdXBsb2Fkcy5zZXQodXBsb2FkSWQsIHVwbG9hZCk7XHJcbiAgICBjcmVhdGVVcGxvYWRFbGVtZW50KHVwbG9hZCk7XHJcbiAgICBcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL3VwbG9hZCcsIHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhLFxyXG4gICAgICAgICAgICBvblVwbG9hZFByb2dyZXNzOiAocHJvZ3Jlc3NFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlUHJvZ3Jlc3ModXBsb2FkSWQsIChwcm9ncmVzc0V2ZW50LmxvYWRlZCAvIHByb2dyZXNzRXZlbnQudG90YWwpICogMTAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcignVXBsb2FkIGZhaWxlZCcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICBjb21wbGV0ZVVwbG9hZCh1cGxvYWRJZCwgcmVzdWx0KTtcclxuICAgICAgICBcclxuICAgICAgICB1aS5zaG93VG9hc3QoJ0ZpbGUgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5JywgJ3N1Y2Nlc3MnKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgZmFpbFVwbG9hZCh1cGxvYWRJZCwgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgdWkuc2hvd1RvYXN0KCdGYWlsZWQgdG8gdXBsb2FkIGZpbGUnLCAnZXJyb3InKTtcclxuICAgIH1cclxufTtcclxuXHJcbi8vIFVJIHVwZGF0ZXNcclxuY29uc3QgY3JlYXRlVXBsb2FkRWxlbWVudCA9ICh1cGxvYWQpID0+IHtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3VwbG9hZC51cGxvYWRlcklkfSAudXBsb2FkLWxpc3RgKTtcclxuICAgIGlmICghY29udGFpbmVyKSByZXR1cm47XHJcbiAgICBcclxuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gJ3VwbG9hZC1pdGVtJztcclxuICAgIGVsZW1lbnQuZGF0YXNldC51cGxvYWRJZCA9IHVwbG9hZC5pZDtcclxuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ1cGxvYWQtaW5mb1wiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidXBsb2FkLW5hbWVcIj4ke3VwbG9hZC5maWxlLm5hbWV9PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ1cGxvYWQtc2l6ZVwiPiR7Zm9ybWF0U2l6ZSh1cGxvYWQuZmlsZS5zaXplKX08L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidXBsb2FkLXByb2dyZXNzXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXJcIiBzdHlsZT1cIndpZHRoOiAwJVwiPjwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ1cGxvYWQtYWN0aW9uc1wiPlxyXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tZGFuZ2VyIGNhbmNlbC11cGxvYWRcIiB0aXRsZT1cIkNhbmNlbCB1cGxvYWRcIj5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiaWNvbi1jYW5jZWxcIj48L2k+XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgYDtcclxuICAgIFxyXG4gICAgLy8gQWRkIGNhbmNlbCBoYW5kbGVyXHJcbiAgICBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYW5jZWwtdXBsb2FkJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgY2FuY2VsVXBsb2FkKHVwbG9hZC5pZCk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xyXG59O1xyXG5cclxuY29uc3QgdXBkYXRlUHJvZ3Jlc3MgPSAodXBsb2FkSWQsIHByb2dyZXNzKSA9PiB7XHJcbiAgICBjb25zdCB1cGxvYWQgPSB1cGxvYWRzLmdldCh1cGxvYWRJZCk7XHJcbiAgICBpZiAoIXVwbG9hZCkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICB1cGxvYWQucHJvZ3Jlc3MgPSBwcm9ncmVzcztcclxuICAgIFxyXG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXVwbG9hZC1pZD1cIiR7dXBsb2FkSWR9XCJdYCk7XHJcbiAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IHByb2dyZXNzQmFyID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZ3Jlc3MtYmFyJyk7XHJcbiAgICAgICAgaWYgKHByb2dyZXNzQmFyKSB7XHJcbiAgICAgICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gYCR7cHJvZ3Jlc3N9JWA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuY29uc3QgY29tcGxldGVVcGxvYWQgPSAodXBsb2FkSWQsIHJlc3VsdCkgPT4ge1xyXG4gICAgY29uc3QgdXBsb2FkID0gdXBsb2Fkcy5nZXQodXBsb2FkSWQpO1xyXG4gICAgaWYgKCF1cGxvYWQpIHJldHVybjtcclxuICAgIFxyXG4gICAgdXBsb2FkLnN0YXR1cyA9ICdjb21wbGV0ZSc7XHJcbiAgICB1cGxvYWQucmVzdWx0ID0gcmVzdWx0O1xyXG4gICAgXHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtdXBsb2FkLWlkPVwiJHt1cGxvYWRJZH1cIl1gKTtcclxuICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjb21wbGV0ZScpO1xyXG4gICAgICAgIGVsZW1lbnQucXVlcnlTZWxlY3RvcignLnVwbG9hZC1hY3Rpb25zJykuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tc3VjY2Vzc1wiIGRpc2FibGVkPlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uLWNoZWNrXCI+PC9pPlxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICBgO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBSZW1vdmUgZnJvbSB1cGxvYWRzIG1hcCBhZnRlciBhbmltYXRpb25cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHVwbG9hZHMuZGVsZXRlKHVwbG9hZElkKTtcclxuICAgICAgICBlbGVtZW50Py5yZW1vdmUoKTtcclxuICAgIH0sIDMwMDApO1xyXG59O1xyXG5cclxuY29uc3QgZmFpbFVwbG9hZCA9ICh1cGxvYWRJZCwgZXJyb3IpID0+IHtcclxuICAgIGNvbnN0IHVwbG9hZCA9IHVwbG9hZHMuZ2V0KHVwbG9hZElkKTtcclxuICAgIGlmICghdXBsb2FkKSByZXR1cm47XHJcbiAgICBcclxuICAgIHVwbG9hZC5zdGF0dXMgPSAnZmFpbGVkJztcclxuICAgIHVwbG9hZC5lcnJvciA9IGVycm9yO1xyXG4gICAgXHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtdXBsb2FkLWlkPVwiJHt1cGxvYWRJZH1cIl1gKTtcclxuICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmYWlsZWQnKTtcclxuICAgICAgICBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy51cGxvYWQtYWN0aW9ucycpLmlubmVySFRNTCA9IGBcclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWRhbmdlclwiIGRpc2FibGVkPlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJpY29uLWVycm9yXCI+PC9pPlxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICBgO1xyXG4gICAgfVxyXG59O1xyXG5cclxuY29uc3QgY2FuY2VsVXBsb2FkID0gKHVwbG9hZElkKSA9PiB7XHJcbiAgICBjb25zdCB1cGxvYWQgPSB1cGxvYWRzLmdldCh1cGxvYWRJZCk7XHJcbiAgICBpZiAoIXVwbG9hZCkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICB1cGxvYWQuc3RhdHVzID0gJ2NhbmNlbGxlZCc7XHJcbiAgICBcclxuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS11cGxvYWQtaWQ9XCIke3VwbG9hZElkfVwiXWApO1xyXG4gICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB1cGxvYWRzLmRlbGV0ZSh1cGxvYWRJZCk7XHJcbn07XHJcblxyXG4vLyBIZWxwZXIgZnVuY3Rpb25zXHJcbmNvbnN0IGZvcm1hdFNpemUgPSAoYnl0ZXMpID0+IHtcclxuICAgIGNvbnN0IHVuaXRzID0gWydCJywgJ0tCJywgJ01CJywgJ0dCJ107XHJcbiAgICBsZXQgc2l6ZSA9IGJ5dGVzO1xyXG4gICAgbGV0IHVuaXRJbmRleCA9IDA7XHJcbiAgICBcclxuICAgIHdoaWxlIChzaXplID49IDEwMjQgJiYgdW5pdEluZGV4IDwgdW5pdHMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgIHNpemUgLz0gMTAyNDtcclxuICAgICAgICB1bml0SW5kZXgrKztcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIGAke3NpemUudG9GaXhlZCgxKX0gJHt1bml0c1t1bml0SW5kZXhdfWA7XHJcbn07XHJcblxyXG4vLyBJbml0aWFsaXplIGZpbGUgdXBsb2FkIG1vZHVsZVxyXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUZpbGVVcGxvYWQgPSAoKSA9PiB7XHJcbiAgICAvLyBBZGQgZXZlbnQgbGlzdGVuZXJzIHRvIGFsbCBmaWxlIHVwbG9hZCBhcmVhc1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZpbGUtdXBsb2FkJykuZm9yRWFjaCh1cGxvYWRlciA9PiB7XHJcbiAgICAgICAgY29uc3QgaW5wdXQgPSB1cGxvYWRlci5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwiZmlsZVwiXScpO1xyXG4gICAgICAgIGNvbnN0IGRyb3Bab25lID0gdXBsb2FkZXIucXVlcnlTZWxlY3RvcignLmRyb3Atem9uZScpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChpbnB1dCkge1xyXG4gICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBoYW5kbGVGaWxlU2VsZWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGRyb3Bab25lKSB7XHJcbiAgICAgICAgICAgIGRyb3Bab25lLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgaGFuZGxlRHJhZ092ZXIpO1xyXG4gICAgICAgICAgICBkcm9wWm9uZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLCBoYW5kbGVEcmFnTGVhdmUpO1xyXG4gICAgICAgICAgICBkcm9wWm9uZS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcblxyXG4vLyBFeHBvcnQgZmlsZSB1cGxvYWQgbW9kdWxlXHJcbmV4cG9ydCBjb25zdCBmaWxlVXBsb2FkID0ge1xyXG4gICAgZ2V0VXBsb2FkczogKCkgPT4gQXJyYXkuZnJvbSh1cGxvYWRzLnZhbHVlcygpKSxcclxuICAgIGNhbmNlbFVwbG9hZCxcclxuICAgIGdldFN1cHBvcnRlZFR5cGVzOiAoKSA9PiBTVVBQT1JURURfVFlQRVMsXHJcbiAgICBnZXRTaXplTGltaXRzOiAoKSA9PiBTSVpFX0xJTUlUU1xyXG59OyAiXSwibmFtZXMiOlsidWkiLCJ1cGxvYWRzIiwiTWFwIiwidG90YWxVcGxvYWRzIiwiU1VQUE9SVEVEX1RZUEVTIiwiaW1hZ2VzIiwiZG9jdW1lbnRzIiwic3ByZWFkc2hlZXRzIiwiYXJjaGl2ZXMiLCJTSVpFX0xJTUlUUyIsImltYWdlIiwiZG9jdW1lbnQiLCJzcHJlYWRzaGVldCIsImFyY2hpdmUiLCJoYW5kbGVGaWxlU2VsZWN0IiwiZXZlbnQiLCJpbnB1dCIsInRhcmdldCIsImZpbGVzIiwiQXJyYXkiLCJmcm9tIiwidXBsb2FkZXJJZCIsImRhdGFzZXQiLCJ1cGxvYWRlciIsInZhbGlkRmlsZXMiLCJmaWx0ZXIiLCJmaWxlIiwidmFsaWRhdGVGaWxlIiwibGVuZ3RoIiwic2hvd1RvYXN0IiwiZm9yRWFjaCIsInVwbG9hZEZpbGUiLCJoYW5kbGVEcmFnT3ZlciIsInByZXZlbnREZWZhdWx0IiwiY3VycmVudFRhcmdldCIsImNsYXNzTGlzdCIsImFkZCIsImhhbmRsZURyYWdMZWF2ZSIsInJlbW92ZSIsImhhbmRsZURyb3AiLCJkYXRhVHJhbnNmZXIiLCJpc1ZhbGlkVHlwZSIsIk9iamVjdCIsInZhbHVlcyIsImZsYXQiLCJpbmNsdWRlcyIsInR5cGUiLCJjb25jYXQiLCJzaXplTGltaXQiLCJnZXRTaXplTGltaXQiLCJzaXplIiwiZm9ybWF0U2l6ZSIsImZpbGVUeXBlIiwidXBsb2FkSWQiLCJ1cGxvYWQiLCJpZCIsInByb2dyZXNzIiwic3RhdHVzIiwic2V0IiwiY3JlYXRlVXBsb2FkRWxlbWVudCIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiYm9keSIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJwcm9ncmVzc0V2ZW50IiwidXBkYXRlUHJvZ3Jlc3MiLCJsb2FkZWQiLCJ0b3RhbCIsIm9rIiwiRXJyb3IiLCJyZXN1bHQiLCJqc29uIiwiY29tcGxldGVVcGxvYWQiLCJlcnJvciIsImZhaWxVcGxvYWQiLCJtZXNzYWdlIiwiY29udGFpbmVyIiwicXVlcnlTZWxlY3RvciIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiaW5uZXJIVE1MIiwibmFtZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJjYW5jZWxVcGxvYWQiLCJhcHBlbmRDaGlsZCIsImdldCIsInByb2dyZXNzQmFyIiwic3R5bGUiLCJ3aWR0aCIsInNldFRpbWVvdXQiLCJkZWxldGUiLCJieXRlcyIsInVuaXRzIiwidW5pdEluZGV4IiwidG9GaXhlZCIsImluaXRpYWxpemVGaWxlVXBsb2FkIiwicXVlcnlTZWxlY3RvckFsbCIsImRyb3Bab25lIiwiZmlsZVVwbG9hZCIsImdldFVwbG9hZHMiLCJnZXRTdXBwb3J0ZWRUeXBlcyIsImdldFNpemVMaW1pdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./public/js/modules/fileUpload.js\n");

/***/ }),

/***/ "./public/js/modules/notifications.js":
/*!********************************************!*\
  !*** ./public/js/modules/notifications.js ***!
  \********************************************/
/***/ (() => {

throw new Error("Module build failed (from ./node_modules/babel-loader/lib/index.js):\nSyntaxError: C:\\inetpub\\Sites\\Imobilien\\public\\js\\modules\\notifications.js: Export 'add' is not defined. (196:4)\n\n\u001b[0m \u001b[90m 194 |\u001b[39m     markAsRead\u001b[33m,\u001b[39m\n \u001b[90m 195 |\u001b[39m     markAllAsRead\u001b[33m,\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 196 |\u001b[39m     add\u001b[33m,\u001b[39m\n \u001b[90m     |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 197 |\u001b[39m     remove\u001b[33m,\u001b[39m\n \u001b[90m 198 |\u001b[39m     clear\n \u001b[90m 199 |\u001b[39m }\u001b[33m;\u001b[39m\u001b[0m\n    at constructor (C:\\inetpub\\Sites\\Imobilien\\node_modules\\@babel\\parser\\lib\\index.js:360:19)\n    at Parser.raise (C:\\inetpub\\Sites\\Imobilien\\node_modules\\@babel\\parser\\lib\\index.js:3327:19)\n    at Parser.parseProgram (C:\\inetpub\\Sites\\Imobilien\\node_modules\\@babel\\parser\\lib\\index.js:12274:16)\n    at Parser.parseTopLevel (C:\\inetpub\\Sites\\Imobilien\\node_modules\\@babel\\parser\\lib\\index.js:12260:25)\n    at Parser.parse (C:\\inetpub\\Sites\\Imobilien\\node_modules\\@babel\\parser\\lib\\index.js:14110:10)\n    at parse (C:\\inetpub\\Sites\\Imobilien\\node_modules\\@babel\\parser\\lib\\index.js:14144:38)\n    at parser (C:\\inetpub\\Sites\\Imobilien\\node_modules\\@babel\\core\\lib\\parser\\index.js:41:34)\n    at parser.next (<anonymous>)\n    at normalizeFile (C:\\inetpub\\Sites\\Imobilien\\node_modules\\@babel\\core\\lib\\transformation\\normalize-file.js:64:37)\n    at normalizeFile.next (<anonymous>)\n    at run (C:\\inetpub\\Sites\\Imobilien\\node_modules\\@babel\\core\\lib\\transformation\\index.js:22:50)\n    at run.next (<anonymous>)\n    at transform (C:\\inetpub\\Sites\\Imobilien\\node_modules\\@babel\\core\\lib\\transform.js:22:33)\n    at transform.next (<anonymous>)\n    at step (C:\\inetpub\\Sites\\Imobilien\\node_modules\\gensync\\index.js:261:32)\n    at C:\\inetpub\\Sites\\Imobilien\\node_modules\\gensync\\index.js:273:13\n    at async.call.result.err.err (C:\\inetpub\\Sites\\Imobilien\\node_modules\\gensync\\index.js:223:11)");

/***/ }),

/***/ "./public/js/modules/settings.js":
/*!***************************************!*\
  !*** ./public/js/modules/settings.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initializeSettings: () => (/* binding */ initializeSettings),\n/* harmony export */   settingsModule: () => (/* binding */ settingsModule)\n/* harmony export */ });\n/* harmony import */ var _ui_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui.js */ \"./public/js/modules/ui.js\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// Import UI module for notifications\n\n\n// Settings state\nlet settings = {\n  general: {},\n  notifications: {},\n  security: {},\n  appearance: {}\n};\n\n// Default settings\nconst DEFAULT_SETTINGS = {\n  general: {\n    language: 'en',\n    timezone: 'UTC',\n    dateFormat: 'DD/MM/YYYY',\n    timeFormat: '24h'\n  },\n  notifications: {\n    email: true,\n    push: true,\n    sound: true,\n    desktop: true\n  },\n  security: {\n    twoFactorAuth: false,\n    sessionTimeout: 30,\n    passwordExpiry: 90,\n    loginAttempts: 5\n  },\n  appearance: {\n    theme: 'light',\n    fontSize: 'medium',\n    compactMode: false,\n    animationsEnabled: true\n  }\n};\n\n// Event handlers\nconst handleSettingChange = async (category, setting, value) => {\n  try {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showLoading(document.querySelector(\"#\".concat(category, \"Settings\")));\n    const response = await updateSetting(category, setting, value);\n    if (response.success) {\n      settings[category][setting] = value;\n      _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Setting updated successfully', 'success');\n\n      // Handle special settings\n      handleSpecialSetting(category, setting, value);\n    }\n  } catch (error) {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Failed to update setting', 'error');\n    console.error('Settings update error:', error);\n\n    // Revert UI to previous state\n    revertSettingUI(category, setting);\n  } finally {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.hideLoading(document.querySelector(\"#\".concat(category, \"Settings\")));\n  }\n};\nconst handleResetSettings = async category => {\n  if (!confirm(\"Are you sure you want to reset \".concat(category, \" settings to default?\"))) {\n    return;\n  }\n  try {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showLoading(document.querySelector(\"#\".concat(category, \"Settings\")));\n    const response = await resetSettings(category);\n    if (response.success) {\n      settings[category] = _objectSpread({}, DEFAULT_SETTINGS[category]);\n      _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast(\"\".concat(category, \" settings reset to default\"), 'success');\n      updateSettingsUI();\n    }\n  } catch (error) {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Failed to reset settings', 'error');\n    console.error('Settings reset error:', error);\n  } finally {\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.hideLoading(document.querySelector(\"#\".concat(category, \"Settings\")));\n  }\n};\n\n// API calls\nconst fetchSettings = async () => {\n  try {\n    const response = await fetch('/api/settings');\n    if (!response.ok) throw new Error('Failed to fetch settings');\n    const data = await response.json();\n    settings = _objectSpread(_objectSpread({}, settings), data.settings);\n    updateSettingsUI();\n  } catch (error) {\n    console.error('Error fetching settings:', error);\n    _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showToast('Failed to load settings', 'error');\n  }\n};\nconst updateSetting = async (category, setting, value) => {\n  const response = await fetch('/api/settings', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      category,\n      setting,\n      value\n    })\n  });\n  if (!response.ok) throw new Error('Failed to update setting');\n  return response.json();\n};\nconst resetSettings = async category => {\n  const response = await fetch(\"/api/settings/\".concat(category, \"/reset\"), {\n    method: 'POST'\n  });\n  if (!response.ok) throw new Error('Failed to reset settings');\n  return response.json();\n};\n\n// UI updates\nconst updateSettingsUI = () => {\n  // Update form inputs\n  Object.entries(settings).forEach(_ref => {\n    let [category, categorySettings] = _ref;\n    Object.entries(categorySettings).forEach(_ref2 => {\n      let [setting, value] = _ref2;\n      const input = document.querySelector(\"#setting_\".concat(category, \"_\").concat(setting));\n      if (!input) return;\n      if (input.type === 'checkbox') {\n        input.checked = value;\n      } else {\n        input.value = value;\n      }\n    });\n  });\n};\nconst revertSettingUI = (category, setting) => {\n  const input = document.querySelector(\"#setting_\".concat(category, \"_\").concat(setting));\n  if (!input) return;\n  if (input.type === 'checkbox') {\n    input.checked = settings[category][setting];\n  } else {\n    input.value = settings[category][setting];\n  }\n};\n\n// Special settings handlers\nconst handleSpecialSetting = (category, setting, value) => {\n  switch (\"\".concat(category, \".\").concat(setting)) {\n    case 'appearance.theme':\n      document.body.dataset.theme = value;\n      break;\n    case 'appearance.fontSize':\n      document.documentElement.style.fontSize = getFontSizeValue(value);\n      break;\n    case 'appearance.animationsEnabled':\n      document.body.classList.toggle('animations-disabled', !value);\n      break;\n    case 'security.twoFactorAuth':\n      if (value) {\n        showTwoFactorSetup();\n      }\n      break;\n  }\n};\nconst getFontSizeValue = size => {\n  const sizes = {\n    small: '14px',\n    medium: '16px',\n    large: '18px'\n  };\n  return sizes[size] || sizes.medium;\n};\nconst showTwoFactorSetup = () => {\n  _ui_js__WEBPACK_IMPORTED_MODULE_0__.ui.showModal('twoFactorSetupModal');\n};\n\n// Initialize settings module\nconst initializeSettings = () => {\n  // Fetch initial settings\n  fetchSettings();\n\n  // Add event listeners for settings forms\n  document.querySelectorAll('.settings-form').forEach(form => {\n    form.addEventListener('change', event => {\n      const input = event.target;\n      const [category, setting] = input.id.replace('setting_', '').split('_');\n      const value = input.type === 'checkbox' ? input.checked : input.value;\n      handleSettingChange(category, setting, value);\n    });\n  });\n\n  // Add event listeners for reset buttons\n  document.querySelectorAll('.reset-settings').forEach(button => {\n    button.addEventListener('click', () => {\n      const category = button.dataset.category;\n      handleResetSettings(category);\n    });\n  });\n};\n\n// Export settings module\nconst settingsModule = {\n  getAll: () => settings,\n  get: (category, setting) => {\n    var _settings$category;\n    return (_settings$category = settings[category]) === null || _settings$category === void 0 ? void 0 : _settings$category[setting];\n  },\n  update: handleSettingChange,\n  reset: handleResetSettings,\n  getDefaults: () => DEFAULT_SETTINGS\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/modules/settings.js\n");

/***/ }),

/***/ "./public/js/modules/ui.js":
/*!*********************************!*\
  !*** ./public/js/modules/ui.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initializeUI: () => (/* binding */ initializeUI),\n/* harmony export */   ui: () => (/* binding */ ui)\n/* harmony export */ });\n// UI State\nlet darkMode = false;\nlet sidebarCollapsed = false;\n\n// Event handlers\nconst handleDarkModeToggle = () => {\n  darkMode = !darkMode;\n  updateTheme();\n  saveUIPreferences();\n};\nconst handleSidebarToggle = () => {\n  sidebarCollapsed = !sidebarCollapsed;\n  updateSidebar();\n  saveUIPreferences();\n};\nconst handleWindowResize = () => {\n  updateResponsiveUI();\n};\n\n// UI updates\nconst updateTheme = () => {\n  document.body.classList.toggle('dark-mode', darkMode);\n  dispatchUIEvent('themeChange', {\n    darkMode\n  });\n};\nconst updateSidebar = () => {\n  const sidebar = document.querySelector('.sidebar');\n  if (sidebar) {\n    sidebar.classList.toggle('collapsed', sidebarCollapsed);\n    dispatchUIEvent('sidebarChange', {\n      collapsed: sidebarCollapsed\n    });\n  }\n};\nconst updateResponsiveUI = () => {\n  const isMobile = window.innerWidth < 768;\n  const isTablet = window.innerWidth >= 768 && window.innerWidth < 1024;\n  document.body.classList.toggle('is-mobile', isMobile);\n  document.body.classList.toggle('is-tablet', isTablet);\n\n  // Auto-collapse sidebar on mobile\n  if (isMobile && !sidebarCollapsed) {\n    sidebarCollapsed = true;\n    updateSidebar();\n  }\n};\n\n// Loading state management\nconst showLoading = function () {\n  let container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;\n  const loader = document.createElement('div');\n  loader.className = 'loading-overlay';\n  loader.innerHTML = \"\\n        <div class=\\\"loading-content\\\">\\n            <div class=\\\"spinner\\\"></div>\\n            <p>Loading...</p>\\n        </div>\\n    \";\n  container.appendChild(loader);\n};\nconst hideLoading = function () {\n  let container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;\n  const loader = container.querySelector('.loading-overlay');\n  if (loader) {\n    loader.remove();\n  }\n};\n\n// Modal management\nconst showModal = modalId => {\n  const modal = document.querySelector(\"#\".concat(modalId));\n  if (modal) {\n    modal.classList.add('show');\n    document.body.classList.add('modal-open');\n    dispatchUIEvent('modalShow', {\n      modalId\n    });\n  }\n};\nconst hideModal = modalId => {\n  const modal = document.querySelector(\"#\".concat(modalId));\n  if (modal) {\n    modal.classList.remove('show');\n    document.body.classList.remove('modal-open');\n    dispatchUIEvent('modalHide', {\n      modalId\n    });\n  }\n};\n\n// Toast notifications\nconst showToast = function (message) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';\n  let duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3000;\n  const toast = document.createElement('div');\n  toast.className = \"toast toast-\".concat(type);\n  toast.innerHTML = \"\\n        <div class=\\\"toast-content\\\">\\n            <span class=\\\"toast-message\\\">\".concat(message, \"</span>\\n        </div>\\n    \");\n  document.querySelector('.toast-container').appendChild(toast);\n  setTimeout(() => {\n    toast.remove();\n  }, duration);\n};\n\n// Helper functions\nconst dispatchUIEvent = function (type) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const event = new CustomEvent(\"ui:\".concat(type), {\n    detail: data,\n    bubbles: true\n  });\n  document.dispatchEvent(event);\n};\nconst saveUIPreferences = () => {\n  const preferences = {\n    darkMode,\n    sidebarCollapsed\n  };\n  localStorage.setItem('uiPreferences', JSON.stringify(preferences));\n};\nconst loadUIPreferences = () => {\n  try {\n    const preferences = JSON.parse(localStorage.getItem('uiPreferences'));\n    if (preferences) {\n      darkMode = preferences.darkMode;\n      sidebarCollapsed = preferences.sidebarCollapsed;\n      updateTheme();\n      updateSidebar();\n    }\n  } catch (error) {\n    console.error('Error loading UI preferences:', error);\n  }\n};\n\n// Initialize UI module\nconst initializeUI = () => {\n  // Add event listeners\n  const darkModeToggle = document.querySelector('#darkModeToggle');\n  if (darkModeToggle) {\n    darkModeToggle.addEventListener('click', handleDarkModeToggle);\n  }\n  const sidebarToggle = document.querySelector('#sidebarToggle');\n  if (sidebarToggle) {\n    sidebarToggle.addEventListener('click', handleSidebarToggle);\n  }\n  window.addEventListener('resize', handleWindowResize);\n\n  // Initialize UI state\n  loadUIPreferences();\n  updateResponsiveUI();\n\n  // Create toast container if it doesn't exist\n  if (!document.querySelector('.toast-container')) {\n    const toastContainer = document.createElement('div');\n    toastContainer.className = 'toast-container';\n    document.body.appendChild(toastContainer);\n  }\n};\n\n// Export UI module\nconst ui = {\n  showLoading,\n  hideLoading,\n  showModal,\n  hideModal,\n  showToast,\n  toggleDarkMode: handleDarkModeToggle,\n  toggleSidebar: handleSidebarToggle,\n  isDarkMode: () => darkMode,\n  isSidebarCollapsed: () => sidebarCollapsed\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/modules/ui.js\n");

/***/ }),

/***/ "./public/js/modules/validation.js":
/*!*****************************************!*\
  !*** ./public/js/modules/validation.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initializeValidation: () => (/* binding */ initializeValidation),\n/* harmony export */   validation: () => (/* binding */ validation)\n/* harmony export */ });\n// Validation rules\nconst RULES = {\n  required: {\n    validate: value => value !== undefined && value !== null && value.toString().trim() !== '',\n    message: 'This field is required'\n  },\n  email: {\n    validate: value => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value),\n    message: 'Please enter a valid email address'\n  },\n  minLength: {\n    validate: (value, min) => value.length >= min,\n    message: min => \"Must be at least \".concat(min, \" characters long\")\n  },\n  maxLength: {\n    validate: (value, max) => value.length <= max,\n    message: max => \"Must not exceed \".concat(max, \" characters\")\n  },\n  pattern: {\n    validate: (value, pattern) => new RegExp(pattern).test(value),\n    message: 'Please match the requested format'\n  },\n  numeric: {\n    validate: value => /^\\d+$/.test(value),\n    message: 'Please enter numbers only'\n  },\n  decimal: {\n    validate: value => /^\\d*\\.?\\d+$/.test(value),\n    message: 'Please enter a valid number'\n  },\n  phone: {\n    validate: value => /^\\+?[\\d\\s-]{10,}$/.test(value),\n    message: 'Please enter a valid phone number'\n  },\n  url: {\n    validate: value => {\n      try {\n        new URL(value);\n        return true;\n      } catch (_unused) {\n        return false;\n      }\n    },\n    message: 'Please enter a valid URL'\n  },\n  date: {\n    validate: value => !isNaN(Date.parse(value)),\n    message: 'Please enter a valid date'\n  },\n  match: {\n    validate: (value, matchId) => {\n      const matchElement = document.getElementById(matchId);\n      return matchElement && value === matchElement.value;\n    },\n    message: 'Fields do not match'\n  }\n};\n\n// Form state tracking\nconst forms = new Map();\n\n// Event handlers\nconst handleInput = event => {\n  const input = event.target;\n  validateField(input);\n};\nconst handleSubmit = event => {\n  const form = event.target;\n  const isValid = validateForm(form);\n  if (!isValid) {\n    event.preventDefault();\n    showFirstError(form);\n  }\n};\n\n// Validation functions\nconst validateField = input => {\n  const rules = getFieldRules(input);\n  const errors = [];\n  rules.forEach(rule => {\n    const {\n      name,\n      params\n    } = parseRule(rule);\n    const validator = RULES[name];\n    if (validator && !validator.validate(input.value, ...params)) {\n      errors.push(typeof validator.message === 'function' ? validator.message(...params) : validator.message);\n    }\n  });\n  updateFieldValidation(input, errors);\n  return errors.length === 0;\n};\nconst validateForm = form => {\n  const inputs = getValidatableInputs(form);\n  let isValid = true;\n  inputs.forEach(input => {\n    if (!validateField(input)) {\n      isValid = false;\n    }\n  });\n  return isValid;\n};\n\n// Helper functions\nconst getFieldRules = input => {\n  const rules = input.dataset.validate;\n  return rules ? rules.split('|') : [];\n};\nconst parseRule = rule => {\n  const [name, paramsString] = rule.split(':');\n  const params = paramsString ? paramsString.split(',') : [];\n  return {\n    name,\n    params\n  };\n};\nconst getValidatableInputs = form => {\n  return Array.from(form.querySelectorAll('[data-validate]'));\n};\nconst updateFieldValidation = (input, errors) => {\n  const container = input.closest('.form-group') || input.parentElement;\n  const feedback = container.querySelector('.invalid-feedback') || createFeedbackElement(container);\n  input.classList.toggle('is-invalid', errors.length > 0);\n  input.classList.toggle('is-valid', errors.length === 0 && input.value !== '');\n  if (errors.length > 0) {\n    feedback.textContent = errors[0];\n    feedback.style.display = 'block';\n  } else {\n    feedback.style.display = 'none';\n  }\n};\nconst createFeedbackElement = container => {\n  const feedback = document.createElement('div');\n  feedback.className = 'invalid-feedback';\n  container.appendChild(feedback);\n  return feedback;\n};\nconst showFirstError = form => {\n  const firstInvalid = form.querySelector('.is-invalid');\n  if (firstInvalid) {\n    firstInvalid.focus();\n    firstInvalid.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center'\n    });\n  }\n};\n\n// Custom validation rules\nconst addValidationRule = (name, options) => {\n  if (RULES[name]) {\n    console.warn(\"Validation rule '\".concat(name, \"' already exists and will be overwritten\"));\n  }\n  RULES[name] = options;\n};\n\n// Initialize validation module\nconst initializeValidation = () => {\n  // Add validation to all forms with data-validate attribute\n  document.querySelectorAll('form[data-validate]').forEach(form => {\n    if (!forms.has(form)) {\n      forms.set(form, true);\n\n      // Add event listeners\n      form.addEventListener('submit', handleSubmit);\n      form.addEventListener('input', handleInput);\n\n      // Initial validation\n      validateForm(form);\n    }\n  });\n};\n\n// Export validation module\nconst validation = {\n  validateField,\n  validateForm,\n  addRule: addValidationRule,\n  rules: RULES\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/modules/validation.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var chunkIds = deferred[i][0];
/******/ 				var fn = deferred[i][1];
/******/ 				var priority = deferred[i][2];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var chunkIds = data[0];
/******/ 			var moreModules = data[1];
/******/ 			var runtime = data[2];
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkimobilien"] = self["webpackChunkimobilien"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors"], () => (__webpack_require__("./public/js/main.js")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;